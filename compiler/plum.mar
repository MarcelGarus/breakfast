import ../../martinaise/stdlib.mar
import error.mar
import type.mar
import builtins.mar
import bacon.mar
import toast.mar
import egg.mar
import yogurt.mar
import universe.mar
import vm.mar

| Compiler Stages:
| - Bacon
| - Toast
| - Egg
| - Yogurt
| - Byte Code in the universe of objects

fun main(): Never {
  eprintln("Welcome to the Plum compiler!")

  var content = read_file("test.plum") or {
    eprintln("Couldn't read file")
    exit(1)
  }
  var content = content.to_string()

  var bacon = content.to_bacon()
  | println("Bacon:\n{bacon}\n")
  
  var toast = bacon.to_toast() or(error) {
    stderr."Oh no! An error occurred:\n\n{error}\n"
    exit(1)
  }
  | println("Toast:\n{toast}\n")

  var egg = toast.to_egg() or(error) {
    stderr."Oh no! An error occurred:\n\n{error}\n"
    exit(1)
  }
  | println("Egg:\n{egg}\n")

  var yogurt = egg.to_yogurt() or(error) {
    stderr."Oh no! An error occurred:\n\n{error}\n"
    exit(1)
  }
  eprintln("Yogurt:\n{yogurt}\n")

  | var c = yogurt.to_c()
  | write_file("test.c", c.code.bytes())
  | eprintln("\nWrote C code to test.c")

  eprintln("Compiling to byte code")
  var universe = big_bang()
  var main = yogurt.compile(universe.&)
  | eprintln("Compiled to byte code:\n{universe}")

  eprintln("Running")
  var five = universe.&.new(Object.int(5))
  var return_value = universe.&.call(main, list(five).to_slice())
  stdout.write_deep(return_value, universe)
  println()

  exit(0)
}
