import ../../martinaise/stdlib.mar
import error.mar
import formatting.mar
import type.mar
import builtins.mar
import string_to_bacon.mar
import bacon.mar
import bacon_to_toast.mar
import toast.mar
import toast_to_egg.mar
import egg.mar
import egg_to_yogurt.mar
import yogurt.mar
import yogurt_to_waffle.mar
import memory_layout.mar
import waffle.mar
import waffle_to_byte_code.mar
import vm.mar

| Compiler Stages:
| - Bacon
| - Toast
| - Egg
| - Yogurt
| - Waffle
| - Byte Code

fun main(): Never {
  eprintln("Welcome to the Plum compiler!")

  var content = read_file("test.plum") or {
    eprintln("Couldn't read file")
    exit(1)
  }
  var content = content.to_string()

  var bacon = content.to_bacon()
  | println("Bacon:\n{bacon}\n")

  var toast = bacon.to_toast() or(error) {
    stderr."Oh no! An error occurred:\n\n{error}\n"
    exit(1)
  }
  | println("Toast:\n{toast}\n")

  var egg = toast.to_egg() or(error) {
    stderr."Oh no! An error occurred:\n\n{error}\n"
    exit(1)
  }
  | println("Egg:\n{egg}\n")

  var yogurt = egg.to_yogurt() or(error) {
    stderr."Oh no! An error occurred:\n\n{error}\n"
    exit(1)
  }
  | eprintln("Yogurt:\n{yogurt}\n")

  var waffle = yogurt.to_waffle()
  | eprintln("Waffle:\n{waffle}\n")

  var byte_code = waffle.to_byte_code()
  | println("Byte Code:")
  | for i in 0..200 do {
  |   var address = byte_code + {i * stride_size_of[ByteCodeInstruction]()}
  |   stdout."{address} | {address.to_reference[ByteCodeInstruction]().*}\n"
  | }

  var result = byte_code.call(list(
    16#33.lower_byte(), 16#33.lower_byte(), 16#33.lower_byte(), 16#33.lower_byte(),
    16#33.lower_byte(), 16#33.lower_byte(), 16#33.lower_byte(), 16#33.lower_byte(),
  ).to_slice())

  var result = result.data.to_reference[Int]().*
  print("Result: {result.radix(16)}")
  | for byte in result do print(" {byte}")
  println()

  exit(0)
}
