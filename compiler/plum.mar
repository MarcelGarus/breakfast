import ../../martinaise/stdlib.mar
import error.mar
import formatting.mar
import type.mar
import builtins.mar
import bacon.mar
import toast.mar
import egg.mar
import yogurt.mar
import memory_layout.mar
import waffle.mar
import waffle_to_byte_code.mar
import vm.mar

| Compiler Stages:
| - Bacon
| - Toast
| - Egg
| - Yogurt
| - Waffle
| - Byte Code in the universe of objects

fun main(): Never {
  eprintln("Welcome to the Plum compiler!")

  | var content = read_file("test.plum") or {
  |   eprintln("Couldn't read file")
  |   exit(1)
  | }
  | var content = content.to_string()

  | var bacon = content.to_bacon()
  | | println("Bacon:\n{bacon}\n")

  | var toast = bacon.to_toast() or(error) {
  |   stderr."Oh no! An error occurred:\n\n{error}\n"
  |   exit(1)
  | }
  | | println("Toast:\n{toast}\n")

  | var egg = toast.to_egg() or(error) {
  |   stderr."Oh no! An error occurred:\n\n{error}\n"
  |   exit(1)
  | }
  | println("Egg:\n{egg}\n")

  | var yogurt = egg.to_yogurt() or(error) {
  |   stderr."Oh no! An error occurred:\n\n{error}\n"
  |   exit(1)
  | }
  | eprintln("Yogurt:\n{yogurt}\n")

  var waffle = Waffle {
    funs = map(
      | Function that accepts [size: 9, alignment: 8], returns [size: 1, alignment: 2]
      WaffleSignature { string = "a" } -> {
        var fun_builder = waffle_fun_builder(9, 8)
        var body = fun_builder.&.body().returns(
          WaffleExpr { size = 1, alignment = 2, kind = WaffleExprKind.byte(42.lower_byte()) }
        )
        fun_builder.finish(body)
      },
      WaffleSignature { string = "main Int" } -> {
        var fun_builder = waffle_fun_builder(0, 1)
        var body = {
          var builder = fun_builder.&.body()
          var blub = builder.&.local(waffle_byte(5.lower_byte()))
          builder.returns(waffle_struct(list(
            waffle_byte(1.lower_byte()),
            waffle_byte(2.lower_byte()),
            waffle_call(
              WaffleSignature { string = "a" },
              waffle_struct(list(waffle_word(3), blub).to_slice()),
              1, 2,
            )
          ).to_slice()))
        }
        fun_builder.finish(body)
      }
    )
  }
  println(waffle)

  var byte_code = waffle.to_byte_code()


  | var hello = "Hello, panic!"
  | var byte_code = uninitialized_slice[ByteCodeInstruction](10)
  | byte_code.&.get_ref(0).* = ByteCodeInstruction.push_64(hello.len)
  | byte_code.&.get_ref(1).* = ByteCodeInstruction.push_64(hello.data.cast[Address, Int]())
  | byte_code.&.get_ref(2).* = ByteCodeInstruction.crash
  | byte_code.&.get_ref(3).* = ByteCodeInstruction.push_64_from_stack(0)
  | byte_code.&.get_ref(4).* = ByteCodeInstruction.push_8(42.lower_byte())
  | byte_code.&.get_ref(5).* = ByteCodeInstruction.store_8
  | byte_code.&.get_ref(6).* = ByteCodeInstruction.load_8
  | byte_code.&.get_ref(7).* = ByteCodeInstruction.ret

  | eprintln("Compiling to byte code")
  | var universe = big_bang()
  | var main = yogurt.compile()
  | eprintln("Compiled to byte code: {main}")

  println("Byte Code:")
  for i in 0..50 do {
    var address = byte_code + {i * stride_size_of[ByteCodeInstruction]()}
    stdout."{address} | {address.to_reference[ByteCodeInstruction]().*}\n"
  }

  | var result = main.call(filled_slice(8, 0.lower_byte()))
  | var result = result.data.to_reference[Int]().*
  | print("Result: {result.radix(16)}")
  | | for byte in result do print(" {byte}")
  | println()

  exit(0)
}
