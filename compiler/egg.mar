| Expression-Guided Graph  
| A representation of code that is simplified and more suitable for
| type-checking.
|
| Types:
|   Names of types are resolved. Usages of type definitions (which are more like
|   aliases anyway) have been resolved so that types have no names anymore â€“
|   they are completely structural.
|
| Functions:
|   Names of locals and types are resolved. Function calls are not resolved to
|   specific functions yet, as this requires overloading resolution. Nested
|   expressions in function bodies have been flattened to a series of small
|   expressions.

import plum.mar

struct Egg { funs: List[EggFun] }

struct EggFun {
  name: StringAndSrc, params: Slice[EggParam], return_type: PlumType,
  impl: EggFunImpl
}
struct EggParam { name: String, type: PlumType }
enum EggFunImpl { code: EggCode, builtin: Builtin }
struct EggCode { exprs: Slice[EggExpr], body: EggBody }
struct EggId { int: Int }
struct EggBody { params: Slice[EggId], exprs: Slice[EggId], returns: EggId }

struct EggExpr { kind: EggExprKind, src: Src }
enum EggExprKind {
  param,
  int: Int,
  string: String,
  struct_: Map[String, EggId],
  member: EggMember,
  symbol: String,
  variant: EggVariant,
  switch_: EggSwitch,
  lambda: EggLambda,
  lambda_call: EggLambdaCall,
  call: EggCall,
}
struct EggMember { of: EggId, name: String }
struct EggSwitch { condition: EggId, cases: Map[String, EggBody] }
struct EggVariant { symbol: String, payloads: Slice[EggId] }
struct EggLambda { params: Slice[EggParam], body: EggBody }
struct EggLambdaCall { lambda: EggId, args: Slice[EggId] }
struct EggCall { function: StringAndSrc, args: Slice[EggId] }

fun /(name: String, type: PlumType): EggParam { EggParam { name, type } }

fun @(kind: EggExprKind, src: Src): EggExpr { EggExpr { kind, src } }

fun ==(a: EggId, b: EggId): Bool { a.int == b.int }
fun hash(hasher: &Hasher, id: EggId) { hasher.hash(id.int) }

fun get(code: EggCode, id: EggId): EggExpr { code.exprs.get(id.int) }

fun write[W](writer: W, egg: Egg) {
  var first = true
  for fun_ in egg.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.name.string}"
    for param in fun_.params do writer." {param}"
    writer." -> {fun_.return_type} ="
    switch fun_.impl
    case code(code) writer.write(code.body, code, 1)
    case builtin(builtin) writer." ..."
  }
}
fun write[W](writer: W, id: EggId) { writer."@{id.int}" }
fun write[W](writer: W, body: EggBody, code: EggCode, indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.exprs do {
    for i in 0..indentation do writer."  "
    writer."{id} = "
    writer.write(code.get(id), code, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, param: EggParam) {
  writer."{param.name}: {param.type}"
}
fun write[W](writer: W, expr: EggExpr, code: EggCode, indentation: Int) {
  switch expr.kind
  case param(param) writer."param {param}"
  case int(int) writer."int {int}"
  case string(string) writer."string {string.debug()}"
  case struct_(struct_) {
    writer."&"
    for field in struct_ do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {field.key}: {field.value}"
    }
  }
  case member(member) writer."{member.of}.{member.name}"
  case symbol(symbol) writer."symbol {symbol}"
  case variant(variant) {
    writer."variant {variant.symbol}"
    for payload in variant.payloads do writer." {payload}"
  }
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, code, indentation + 2)
    }
  }
  case lambda(lambda) {
    writer."lambda"
    for param in lambda.params do writer." {param}"
    writer." ="
    writer.write(lambda.body, code, indentation + 1)
  }
  case lambda_call(call) {
    writer."call {call.lambda}"
    for arg in call.args do writer." {arg}"
  }
  case call(call) {
    writer."call {call.function.string}"
    for arg in call.args do writer." {arg}"
  }
}
