import plum.mar

| Byte Code Builder  
| In order to make it easy to generate byte code and for this to not get out of
| sync with our comptime model of the stack, we have a ByteCodeBuilder. Each
| instruction has a corresponding function that appends the instruction to the
| instruction buffer and also updates the stack model.

struct ByteCodeBuilder {
  instructions: &List[ByteCodeInstruction],
  patches: &List[Tuple2[&ByteCodeInstruction, WaffleSignature]],
  waffle: Waffle,
}
struct FunByteCodeBuilder {
  instructions: &List[ByteCodeInstruction],
  patches: &List[Tuple2[&ByteCodeInstruction, WaffleSignature]],
  stack_mapping: Map[WaffleId, Int],
  stack_size: Int,
  fun_: WaffleFun,
  waffle: Waffle,
}

fun add_mapping(builder: &FunByteCodeBuilder, id: WaffleId, absolute_offset: Int) {
  builder.stack_mapping.&.put(id, absolute_offset)
}
fun find_distance_from_top(builder: FunByteCodeBuilder, id: WaffleId): Int {
  builder.stack_size - builder.stack_mapping.get(id)
}

fun emit(builder: &FunByteCodeBuilder, instruction: ByteCodeInstruction) {
  eprintln("Emitting {instruction}")
  if instruction is push_padding(amount) then if amount == 0 then return {}
  if instruction is pop(amount) then if amount == 0 then return {}
  if instruction is pop_below_top(amount) then if amount.b == 0 then return {}

  builder.instructions.push(instruction)
  builder.stack_size = builder.stack_size + instruction.stack_size_diff()
}
fun stack_size_diff(instruction: ByteCodeInstruction): Int {
  switch instruction
  case push_padding(amount) amount
  case push_8 1
  case push_64 8
  case push_8_from_stack 1
  case push_64_from_stack 8
  case pop(amount) 0 - amount
  case pop_below_top(tuple) 0 - tuple.b
  case jump 0
  case jump_table -1
  case call 0 | Note: You need to udpate this manually
  case ret 0
  case add_64 -8
  case sub_64 -8
  case mul_64 -8
  case div_64 -8
  case mod_64 -8
  case and_64 -8
  case or_64 -8
  case xor_64 -8
  case malloc -1
  case store_8 -9
  case store_64 -16
  case load_8 -7
  case load_64 0
  case crash todo("stack size of crash")
}

fun align_to(builder: &FunByteCodeBuilder, alignment: Int): Int {
  var padding = builder.stack_size.round_up_to_multiple_of(alignment) - builder.stack_size
  builder.emit(ByteCodeInstruction.push_padding(padding))
  padding
}
fun copy_from_stack(builder: &FunByteCodeBuilder, offset: Int, size: Int) {
  if size > offset then
    panic("called copy_from_stack with offset {offset}, but size {size}")
  loop if size < 8 then break else {
    builder.emit(ByteCodeInstruction.push_64_from_stack(offset - 8))
    size = size - 8
  }
  for byte in 0..size do
    builder.emit(ByteCodeInstruction.push_8_from_stack(offset - 1))
}
fun copy_from_stack(builder: &FunByteCodeBuilder, id: WaffleId, size: Int) {
  builder.copy_from_stack(builder.find_distance_from_top(id), size)
}

fun ref_of_next(instructions: List[ByteCodeInstruction]): &ByteCodeInstruction {
  instructions.data.get_ref(instructions.len)
}

| Compilation from Waffle to Byte Code  

fun to_byte_code(waffle: Waffle): Address {
  var instructions = list[ByteCodeInstruction]()
  instructions.&.reserve_uninitialized(200) | TODO
  var signature_to_address = map[WaffleSignature, Address]()
  var patches = list[Tuple2[&ByteCodeInstruction, WaffleSignature]]()
  var builder = ByteCodeBuilder {
    instructions = instructions.&, patches = patches.&, waffle
  }

  for fun_ in waffle.funs do {
    signature_to_address.&.put(fun_.key, instructions.ref_of_next().to_address())
    fun_.value.compile(builder.&)
  }
  for patch in patches do
    patch.a.* = ByteCodeInstruction.call(signature_to_address.get(patch.b))

  signature_to_address.get(WaffleSignature { string = "main Int" })
}
fun compile(fun_: WaffleFun, builder: &ByteCodeBuilder) {
  var params_id = WaffleId { index = 0 }
  var params = fun_.locals.get(0)
  var builder = FunByteCodeBuilder {
    instructions = builder.instructions, patches = builder.patches,
    stack_mapping = map(params_id -> 0), stack_size = params.size,
    fun_, waffle = builder.waffle,
  }.&

  | Now, the stack contains the params.

  fun_.body.compile(builder)

  | Now, the stack contains the params and the return value.

  builder.emit(ByteCodeInstruction.pop_below_top(tuple(
    fun_.body.returns.size, fun_.locals.get(0).size
  )))

  | Now, the stack contains the return value.

  builder.emit(ByteCodeInstruction.ret)
}
fun compile(body: WaffleBody, builder: &FunByteCodeBuilder) {
  var stack_size_at_body_start = builder.stack_size

  for local in body.locals do {
    var expr = builder.fun_.get(local)
    builder.align_to(expr.alignment)
    builder.add_mapping(local, builder.stack_size)
    expr.compile(builder)
  }

  builder.align_to(body.returns.alignment)
  var locals_size = builder.stack_size - stack_size_at_body_start
  body.returns.compile(builder)

  var return_value_size = body.returns.size

  builder.emit(ByteCodeInstruction.pop_below_top(tuple(return_value_size, locals_size)))
}

| Compiles an expression. Assumes that the stack is already aligned for the
| expression.
fun compile(expr: WaffleExpr, builder: &FunByteCodeBuilder) {
  switch expr.kind
  case param unreachable()
  case padding(amount) builder.emit(ByteCodeInstruction.push_padding(amount))
  case byte(byte) builder.emit(ByteCodeInstruction.push_8(byte))
  case word(word) builder.emit(ByteCodeInstruction.push_64(word))
  case local(local) builder.copy_from_stack(local, expr.size)
  case struct_(struct_) for field in struct_ do field.compile(builder)
  case member(member) {
    var padding = builder.align_to(member.of.alignment)
    member.of.compile(builder)
    var amount_before_member = padding + member.offset
    var amount_after_member  = member.of.size - expr.size - member.offset
    builder.emit(ByteCodeInstruction.pop(amount_after_member))
    builder.emit(ByteCodeInstruction.pop_below_top(tuple(expr.size, amount_before_member)))
  }
  case switch_(switch_) {
    switch_.byte.compile(builder)

    var jump_table = builder.instructions.ref_of_next()
    builder.emit(ByteCodeInstruction.jump_table(empty_slice[Address]())) | placeholder
    var stack_size_at_start_of_case = builder.stack_size

    var table = list[Address]()
    var end_jumps = list[&ByteCodeInstruction]()
    for case_ in switch_.cases do {
      table.&.push(builder.instructions.ref_of_next().to_address())
      builder.stack_size = stack_size_at_start_of_case
      case_.compile(builder)
      end_jumps.&.push(builder.instructions.ref_of_next())
      builder.emit(ByteCodeInstruction.jump(null)) | placeholder
    }
    var end = builder.instructions.ref_of_next().to_address()
    for jump in end_jumps do jump.* = ByteCodeInstruction.jump(end)
    jump_table.* = ByteCodeInstruction.jump_table(table.to_slice())
  }
  case call(call) {
    var padding = builder.align_to(call.args.alignment)
    call.args.compile(builder)
    var call_ref = builder.instructions.ref_of_next()
    builder.emit(ByteCodeInstruction.call(null))
    builder.patches.push(tuple(call_ref, call.function))
    builder.stack_size = builder.stack_size - call.args.size + expr.size
    builder.emit(ByteCodeInstruction.pop_below_top(tuple(expr.size, padding)))
  }
  case add_64(args) { args.compile(builder) builder.emit(ByteCodeInstruction.add_64) }
  case sub_64(args) { args.compile(builder) builder.emit(ByteCodeInstruction.sub_64) }
  case mul_64(args) { args.compile(builder) builder.emit(ByteCodeInstruction.mul_64) }
  case div_64(args) { args.compile(builder) builder.emit(ByteCodeInstruction.div_64) }
  case mod_64(args) { args.compile(builder) builder.emit(ByteCodeInstruction.mod_64) }
  case and_64(args) { args.compile(builder) builder.emit(ByteCodeInstruction.and_64) }
  case or_64(args)  { args.compile(builder) builder.emit(ByteCodeInstruction.or_64) }
  case xor_64(args) { args.compile(builder) builder.emit(ByteCodeInstruction.xor_64) }
  case crash(args) {
    todo("crash args")
    builder.emit(ByteCodeInstruction.crash)
  }
}
