| C Source Code  

import breakfast.mar

struct CCode { code: String }

fun write[W](writer: W, c: CCode) { writer."{c.code}" }

fun collect_types(yogurt: Yogurt): Set[BreakfastType] {
  var types = set[BreakfastType]()
  for fun_ in yogurt.funs do {
    for expr in fun_.value.exprs do {
      var type = expr.type
      types.&.put(type)
    }
  }
  types
}

fun mangle(type: BreakfastType): String {
  var b = string_builder().&
  b."Type_"
  b.mangle(type)
  b.to_string()
}
fun mangle[W](writer: W, type: BreakfastType) {
  switch type
  case primitive(name) writer."{name}"
  case never writer."never"
  case enum_(variants) {
    if variants.size != 1 then writer."enum_of_"
    for variant in variants do {
      writer."{variant.key}"
      if variant.value.is_not_empty() then {
        writer."_of_"
        for arg in variant.value do
          writer.mangle(arg)
        writer."_end_"
      }
    }
    if variants.size != 1 then writer."_end_"
  }
  case recursive(level) writer."rec_{level}"
}
fun mangle(str: String): String {
  var b = string_builder().&
  b.mangle(str)
  b.to_string()
}
fun mangle[W](writer: W, str: String) {
  for char in str.chars() do
    if char.is_letter() then writer."{char}"
    else writer."_{char.byte.to_int().radix(16)}_"
}
fun mangle(id: YogurtId): String { "_{id.int}" }

fun to_c(yogurt: Yogurt): CCode {
  var b = string_builder().&
  b."// This is a generated file. Do not edit by hand.\n
    '\n
    '#include <stdint.h>\n
    '#include <stdio.h>\n
    '#include <stdlib.h>\n
    '\n
    '// Types:\n"

  var types = yogurt.collect_types()

  for type in types do b."struct {type.mangle()};\n"
  for type in types do b."typedef struct {type.mangle()} {type.mangle()};\n"
  b."\n"

  for type in types do {
    b."\n// {type}\n"
    b."struct {type.mangle()} \{\n"
    switch type.extend_one_level()
    case primitive(name) {
      if name == "Int" then
        b."    int64_t value;\n"
      else if name == "String" then
        b."    char* data;\n
          '    size_t len;\n"
      else if name == "Type" then {}
      else todo("implement primitive {name}")
    }
    case never {}
    case enum_(variants) {
      b."    uint8_t tag; //"
      for variant in variants.iter().&.enumerate() do
        b." {variant.index} = {variant.item.key}"
      b."\n"
      b."    union \{\n"
      for variant in variants do {
        b."        struct \{ "
        for arg in variant.value.iter().&.enumerate() do
          b."{arg.item.mangle()}* _{arg.index}; "
        b."\} {variant.key.mangle()};\n"
      }
      b."    \} as;\n"
    }
    case recursive(level) b."// TODO: handle recursive types"
    b."\};\n"
  }

  b."\n// Function declarations:\n\n"

  for fun_ in yogurt.funs do {
    var signature = fun_.key
    var fun_ = fun_.value

    var return_type = fun_.get(fun_.body.returns).type
    b."{return_type.mangle()}* {signature.str.mangle()}("

    var first = true
    for param in fun_.body.params do {
      if first then first = false else b.", "
      b."{fun_.get(param).type.mangle()}* {param.mangle()}"
    }
    b.");\n"
  }

  b."\n// Function implementations:\n\n"

  for fun_ in yogurt.funs do {
    var signature = fun_.key
    var fun_ = fun_.value

    b."// {signature}\n"

    var return_type = fun_.get(fun_.body.returns).type
    b."{return_type.mangle()}* {signature.str.mangle()}("

    var first = true
    for param in fun_.body.params do {
      if first then first = false else b.", "
      b."{fun_.get(param).type.mangle()}* {param.mangle()}"
    }
    b.") \{\n"
    fun_.body.to_c(fun_, b, 1)
    b."    return {fun_.body.returns.mangle()};\n"
    b."\}\n\n"
  }

  b."int main(int argc, char** argv) \{\n
    '    Type_Int* _argc = malloc(sizeof(Type_Int));\n
    '    _argc->value = argc;\n
    '    Type_Int* result;\n
    '    result = main_20_Int(_argc);\n
    '    printf(\"result: %ld\\n\", result->value);\n
    '    return 0;\n
    '}\n
    '"

  CCode { code = b.to_string() }
}

fun to_c[W](body: YogurtBody, fun_: YogurtFun, writer: W, indentation: Int) {
  for id in body.exprs do {
    for i in 0..indentation do writer."    "
    var expr = fun_.get(id)
    writer."{expr.type.mangle()}* {id.mangle()} = 
      'malloc(sizeof({expr.type.mangle()})); // {expr.type}\n"

    switch expr.op
    case param panic("param should not exist in body")
    case comptime(value) {
      for i in 0..indentation do writer."    "
      switch value.kind
      case int(int) {
        writer."{id.mangle()}->value = {int};\n"
      }
      case string(string) {
        writer."{id.mangle()}->data = {string.debug()};\n"
        for i in 0..indentation do writer."    "
        writer."{id.mangle()}->len = {string.len};\n"
      }
      case type(type) {
        writer."// comptime types is (hopefully) not accessed at runtime"
      }
      case tag(tag) {
        var variants = expr.type.enum_.unwrap()
        var target_index = 0
        for variant in variants.iter().&.enumerate() do
          if variant.item.key == tag.a then
            target_index = variant.index
        writer."{id.mangle()}->tag = {target_index};\n"
      }
    }
    case switch_(switch_) {
      for i in 0..indentation do writer."    "
      var type = fun_.get(switch_.condition).type.enum_.unwrap()
      writer."switch ({switch_.condition.mangle()}->tag) \{\n"
      for case_ in switch_.cases do {
        for i in 0..indentation do writer."    "
        var index = 0
        for tag in type.iter().&.enumerate() do {
          if tag.item.key == case_.key then index = tag.index
        }
        writer."    case {index}: // {case_.key}\n"
        for param in case_.value.params.iter().&.enumerate() do {
          for i in 0..{indentation + 2} do writer."    "
          writer."{fun_.get(param.item).type.mangle()}* {param.item.mangle()} = 
            '{switch_.condition.mangle()}->as.{case_.key}._{param.index}; 
            '// {fun_.get(param.item).type}\n"
        }
        case_.value.to_c(fun_, writer, indentation + 2)
        for i in 0..indentation do writer."    "
        writer."        {id.mangle()} = {case_.value.returns.mangle()};\n"
        for i in 0..indentation do writer."    "
        writer."        break;\n"
      }
      for i in 0..indentation do writer."    "
      writer."\}\n"
    }
    case tag(tag) {
      var index = 0
      for variant in expr.type.enum_.unwrap().iter().&.enumerate() do
        if variant.item.key == tag.symbol then index = variant.index
      for i in 0..indentation do writer."    "
      writer."{id.mangle()}->tag = {index};\n"
      for arg in tag.args.iter().enumerate() do {
        for i in 0..indentation do writer."    "
        writer."{id.mangle()}->as.{tag.symbol}._{arg.index} = {arg.item.mangle()};\n"
      }
    }
    case call(call) {
      for i in 0..indentation do writer."    "
      var arg_types = list[BreakfastType]()
      for arg in call.args do arg_types.&.push(fun_.get(arg).type)
      writer."{id.mangle()} = {call.receiver.str.mangle()}("
      var first = true
      for arg in call.args do {
        if first then first = false else writer.", "
        writer."{arg.mangle()}"
      }
      writer.");\n"
    }
    case instruction(instruction) {
      for i in 0..indentation do writer."    "
      var args = instruction.args
      switch instruction.instruction
      case add writer."{id.mangle()}->value = {args.get(0).mangle()}->value + 
        '{args.get(1).mangle()}->value;\n"
      case sub writer."{id.mangle()}->value = {args.get(0).mangle()}->value - 
        '{args.get(1).mangle()}->value;\n"
      case mul writer."{id.mangle()}->value = {args.get(0).mangle()}->value * 
        '{args.get(1).mangle()}->value;\n"
      case div writer."{id.mangle()}->value = {args.get(0).mangle()}->value / 
        '{args.get(1).mangle()}->value;\n"
      case compare {
        writer."if ({args.get(0).mangle()}->value < {args.get(1).mangle()}->value) 
          '{id.mangle()}->tag = 0;\n"
        for i in 0..indentation do writer."    "
        writer."if ({args.get(0).mangle()}->value == {args.get(1).mangle()}->value) 
          '{id.mangle()}->tag = 1;\n"
        for i in 0..indentation do writer."    "
        writer."if ({args.get(0).mangle()}->value > {args.get(1).mangle()}->value) 
          '{id.mangle()}->tag = 2;\n"
      }
      case concat {
        writer."TODO: implement concat"
      }
      case crash {
        writer."for (int i = 0; i < {args.get(0).mangle()}->len; i++)\n"
        for i in 0..indentation do writer."    "
        writer."    fprintf(stderr, \"%c\", {args.get(0).mangle()}->data[i]);\n"
        for i in 0..indentation do writer."    "
        writer."fprintf(stderr, \"\\n\");\n"
        for i in 0..indentation do writer."    "
        writer."exit(1);\n"
      }
    }
  }
}
