import plum.mar

struct OngoingBacon {
  indentation: Int,
  line: String,
  src: Src,
  children: List[OngoingBacon],
}

fun to_bacon(bacon: OngoingBacon): Bacon {
  var children = list[Bacon]()
  for child in bacon.children do children.&.push(child.to_bacon())
  Bacon { line = bacon.line, src = bacon.src, children = children.to_slice() }
}
fun to_bacon(content: String): Bacon {
  var src_prototype = Src { file_content = content, range = 0..0 }
  var root = OngoingBacon {
    indentation = -1, line = "", src = invalid_src(),
    children = list[OngoingBacon]()
  }
  var total_offset = 0
  for line in content.lines() do {
    var range = total_offset ..+ line.len
    total_offset = range.end + 1

    | Skip empty lines.
    if line.trim().is_empty() then continue

    | Find out the indentation and trim it.
    var indentation = 0
    loop {
      line.chars().get(indentation) == space or break
      indentation = indentation + 1
    }
    line = line.substr(indentation..line.len)
    range = {range.start + indentation} .. range.end

    | Look for the correct node where to insert this line as a child.
    var node = root.&
    loop {
      var last_child = node.children.&.get_maybe_ref(node.children.len - 1)
        or break
      if last_child.indentation >= indentation then break
      node = last_child
    }

    | Insert the line, creating an extra block if it starts with a special char.
    var first_char = line.chars().get(0)
    var create_extra_block =
      first_char == #& or first_char == #| or first_char == #%
    node.children.&.push(
      if create_extra_block then
        OngoingBacon {
          indentation,
          line = "{first_char}",
          src = src_prototype.with_range(range.start..{range.start + 1}),
          children =
            if line.without_first(1).trim().is_empty() then
              list[OngoingBacon]()
            else
              list(OngoingBacon {
                indentation = indentation + 2,
                line = line.without_first(1),
                src = src_prototype.with_range({range.start + 1}..range.end),
                children = list[OngoingBacon](),
              })
        }
      else
        OngoingBacon {
          indentation,
          line = line.trim(),
          src = src_prototype.with_range(range),
          children = list[OngoingBacon]()
        }
    )
  }

  root.to_bacon()
}
