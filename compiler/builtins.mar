import breakfast.mar

enum Builtin {
  add, sub, mul, div, compare, | int operations
  crash,
}

var builtins =
  vec(Builtin.add, Builtin.sub, Builtin.mul, Builtin.div, Builtin.compare,
    Builtin.crash)
    .to_slice()

fun write[W](writer: W, builtin: Builtin) { writer."{builtin.debug()}" }

fun num_params(builtin: Builtin): Int {
  switch builtin
  case add 2
  case sub 2
  case mul 2
  case div 2
  case compare 2
  case crash 1
}

enum Instruction {
  add, sub, mul, div, compare,
  crash,
}

fun write[W](writer: W, instruction: Instruction) {
  writer."{instruction.debug()}"
}

