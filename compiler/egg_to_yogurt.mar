| Convert Egg to Yogurt  

import plum.mar

fun to_yogurt(egg: Egg): Result[Yogurt, Error] {
  var main = egg.lookup("main", list(type_int).to_slice()) or
    return error[Yogurt, Error](error("No main function.", invalid_src()))
  var yogurt = Yogurt { funs = map[YogurtSignature, YogurtFun]() }
  main.fun_.compile(main.substitutions, "main", egg, yogurt.&)?
  ok[Yogurt, Error](yogurt)
}

| Looking up functions in the Egg  
| Whenever a function is called, we need to choose the correct function based on
| the name and argument types.

struct EggLookupResult { fun_: EggFun, substitutions: Substitutions }
fun lookup(
  egg: Egg, name: String, args: Slice[PlumType],
): Result[EggLookupResult, String] {
  var name_matches = list[EggFun]()
  for fun_ in egg.funs do
    if fun_.name.string == name then
      name_matches.&.push(fun_)
  if name_matches.is_empty() then
    return error[EggLookupResult, String]("There is no function named {name.debug()}.")

  var full_matches = list[Tuple2[EggFun, Substitutions]]()
  for fun_ in name_matches do {
    fun_.params.len == args.len or continue
    var constraints = constraints()
    var param_types = list[PlumType]()
    for param in fun_.params do param_types.&.push(param.type)
    var substitutions =
      args.match_against(param_types.to_slice(), constraints) or continue

    full_matches.&.push(tuple(fun_, substitutions))
  }

  if full_matches.is_empty() then
    return error[EggLookupResult, String](
      "There is no matching function named {name} for the args {args}.")
  if full_matches.len > 1 then
    return error[EggLookupResult, String]({
      var b = string_builder().&
      b."multiple functions match {name} {args}:"
      for match in full_matches do
        b."\n  {match.a.name.string} {match.a.params}  (with {match.b.debug()})"
      b.to_string()
    })
  var fun_and_substitutions = full_matches.get(0)

  ok[EggLookupResult, String](EggLookupResult {
    fun_          = fun_and_substitutions.a,
    substitutions = fun_and_substitutions.b,
  })
}

| Running code at compile time  
| Plum guarantees that functions with compile-time known args run at compile
| time. Here is the code for that.

enum ComptimeResult {
  returns: YogurtValue,
  runtime_crash: Tuple2[String, PlumType],
  comptime_error: String,
}

fun run(
  egg_fun: EggFun, args: Slice[YogurtValue], substitutions: Substitutions,
  name: String,
  egg: Egg, yogurt: &Yogurt
): ComptimeResult {
  println("Running {name} {args}")

  | TODO: catch recursive calls

  switch egg_fun.impl
  case code(code) {
    var builder = yogurt_fun_builder()
    var compiler = YogurtCodeCompiler {
      egg, code, yogurt, egg_to_yogurt = map[EggId, YogurtId]()
    }

    var params = list[YogurtId]()
    for both in zip(code.body.params.iter(), args.iter()) do {
      var egg_id = both.a
      var yogurt_id = builder.&.push(both.b.to_expr())
      params.&.push(yogurt_id)
      compiler.&.add_mapping(egg_id, yogurt_id)
    }
    var params = params.to_slice()

    var body =
      code.body.compile(params, builder.&, compiler.&)
        or(error) return ComptimeResult.comptime_error(error.message)

    var value =
      | TODO: handle panics?
      switch builder.get(body.returns).op
      case comptime(value) value
      default
        panic("Comptime call results in runtime result: 
          '{builder.get(body.returns).op.debug()}")

    | Check that the return type matches what the function claims it is.
    var claimed_return_type = egg_fun.return_type.specialize(substitutions)
    var actual_return_type = value.type
    actual_return_type.is_assignable_to(claimed_return_type) or
      return ComptimeResult.comptime_error(
        "Return types don't match:\n
        'claimed type: {claimed_return_type}\n
        ' actual type: {actual_return_type}"
      )
    var value = value.comptime_cast(claimed_return_type)

    ComptimeResult.returns(value)
  }
  case builtin(builtin) builtin.run(args)
}
fun run(builtin: Builtin, args: Slice[YogurtValue]): ComptimeResult {
  var value =
    switch builtin
    case add_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      yogurt_value_int(a + b)
    }
    case sub_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      yogurt_value_int(a - b)
    }
    case mul_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      yogurt_value_int(a * b)
    }
    case div_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      if b == 0 then return ComptimeResult.runtime_crash(tuple("Divide by zero.", type_int))
      yogurt_value_int(a / b)
    }
    case mod_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      if b == 0 then return ComptimeResult.runtime_crash(tuple("Mod by zero.", type_int))
      yogurt_value_int(a % b)
    }
    case and_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      yogurt_value_int(a & b)
    }
    case or_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      yogurt_value_int(or(a, b))
    }
    case xor_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      yogurt_value_int(a ^ b)
    }
    case compare_ints {
      var a = args.get(0).kind.int.unwrap()
      var b = args.get(1).kind.int.unwrap()
      var symbol =
        switch a <=> b
        case less "Less"
        case equal "Equal"
        case greater "Greater"
      yogurt_value_symbol(symbol).comptime_cast(type_ordering)
    }
    case concat_strings {
      var a = args.get(0).kind.string.unwrap()
      var b = args.get(1).kind.string.unwrap()
      yogurt_value_string("{a}{b}")
    }
    case crash {
      var message = args.get(0).kind.string.unwrap()
      return ComptimeResult.runtime_crash(tuple(message, type_never))
    }
    case type_of {
      var value = args.get(0)
      yogurt_value_type(value.type)
    }
    case type_info {
      var type = args.get(0).kind.type.unwrap()
      {
        switch type.extend_one_level()
        case primitive(name) yogurt_value_symbol(name)
        case never yogurt_value_symbol("Never")
        case struct_(struct_)
          yogurt_value_variant("Struct", list(yogurt_value_list({
            var fields = list[YogurtValue]()
            for field in struct_ do {
              fields.&.push(yogurt_value_struct(map(
                "name" -> yogurt_value_string(field.key),
                "type" -> yogurt_value_type(field.value),
              )))
            }
            fields.to_slice()
          }, type_field)).to_slice())
        case enum_(enum_)
          yogurt_value_variant("Enum", list(yogurt_value_list({
            var variants = list[YogurtValue]()
            for variant in enum_ do {
              variants.&.push(yogurt_value_struct(map(
                "name" -> yogurt_value_string(variant.key),
                "args" -> yogurt_value_list({
                  var args = list[YogurtValue]()
                  for arg in variant.value do
                    args.&.push(yogurt_value_type(arg))
                  args.to_slice()
                }, type_type),
              )))
            }
            variants.to_slice()
          }, type_variant)).to_slice())
        case lambda todo()
        case recursive unreachable()
      }.comptime_cast(type_type_info)
    }
  ComptimeResult.returns(value)
}

fun comptime_cast(value: YogurtValue, type: PlumType): YogurtValue {
  switch value.kind
  case int value
  case string value
  case struct_(struct_) {
    YogurtValueKind.struct_({
      var fields = map[String, YogurtValue]()
      var field_types = type.extend_one_level().struct_.unwrap()
      for field in struct_ do
        fields.&.put(
          field.key,
          field.value.comptime_cast(field_types.get(field.key))
        )
      fields
    }) $ type
  }
  case variant(variant) {
    YogurtValueKind.variant(YogurtVariantValue {
      symbol = variant.symbol,
      payloads = {
        var payloads = list[YogurtValue]()
        var payload_types =
          type.extend_one_level().enum_.unwrap().get(variant.symbol)
        for both in zip(variant.payloads.iter(), payload_types.iter()) do
          payloads.&.push(both.a.comptime_cast(both.b))
        payloads.to_slice()
      }
    }) $ type
  }
  case lambda todo()
  case type value
}

| Compiling code to run at runtime  
| If not all arguments to a function are known at compile-time, the function is
| compiled into some code that will run later (at runtime).

struct YogurtFunBuilder { exprs: List[YogurtExpr] }

fun yogurt_fun_builder(): _ { YogurtFunBuilder { exprs = list[YogurtExpr]() } }
fun push(builder: &YogurtFunBuilder, expr: YogurtExpr): YogurtId {
  var id = YogurtId { int = builder.exprs.len }
  builder.exprs.&.push(expr)
  id
}
fun get(builder: YogurtFunBuilder, id: YogurtId): YogurtExpr {
  builder.exprs.get(id.int)
}

struct YogurtCodeCompiler {
  egg: Egg,
  code: EggCode,
  yogurt: &Yogurt,
  egg_to_yogurt: Map[EggId, YogurtId],
}

fun add_mapping(
  compiler: &YogurtCodeCompiler, egg_id: EggId, yogurt_id: YogurtId
) {
  compiler.egg_to_yogurt.&.put(egg_id, yogurt_id)
}
fun lookup(compiler: YogurtCodeCompiler, egg_id: EggId): YogurtId {
  compiler.egg_to_yogurt.get(egg_id)
}

fun compile(
  egg_fun: EggFun, substitutions: Substitutions, name: String,
  egg: Egg, yogurt: &Yogurt
): Result[YogurtFun, Error] {
  var param_types = list[PlumType]()
  for param in egg_fun.params do
    param_types.&.push(param.type.specialize(substitutions))
  var param_types = param_types.to_slice()

  var signature = yogurt_signature(name, param_types)
  if yogurt.funs.get_maybe(signature) is some(fun_) then
    return ok[YogurtFun, Error](fun_)
  println("Compiling {signature}")

  | When a function recursively calls itself, we don't want the compiler to get
  | stuck in an infinite recursion, compiling the function again and again. To
  | prevent that, we insert a placeholder in the Yogurt. It will be overwritten
  | at the end of this function. It's okay to put it there because code that
  | calls this function won't actually inspect the generated body – instead, it
  | will only use the return type, which it calculates based on the function's
  | signature.
  yogurt.funs.&.put(signature, yogurt_fun_placeholder)

  var fun_ =
    switch egg_fun.impl
    case code(code) {
      var builder = yogurt_fun_builder()
      var compiler = YogurtCodeCompiler {
        egg, code, yogurt, egg_to_yogurt = map[EggId, YogurtId]()
      }

      var params = list[YogurtId]()
      for both in zip(code.body.params.iter(), param_types.iter()) do {
        var egg_id = both.a
        var yogurt_id = builder.&.push(YogurtOp.param $ both.b)
        params.&.push(yogurt_id)
        compiler.&.add_mapping(egg_id, yogurt_id)
      }
      var params = params.to_slice()

      var body = code.body.compile(params, builder.&, compiler.&)?

      | Check that the return type matches what the function claims it is.
      var claimed_return_type = egg_fun.return_type.specialize(substitutions)
      var actual_return_type = builder.get(body.returns).type
      if claimed_return_type != actual_return_type then {
        actual_return_type.is_assignable_to(claimed_return_type) or
          return error[YogurtFun, Error](error(
            "Return types don't match:\n
            'claimed type: {claimed_return_type}\n
            ' actual type: {actual_return_type}",
            egg_fun.name.src
          ))

        var body_with_cast = list[YogurtId]()
        for id in body.exprs do body_with_cast.&.push(id)
        var cast_fun =
          compiler.yogurt.compile_cast_fun(actual_return_type, claimed_return_type)
        var cast = builder.&.push(
          if builder.get(body.returns).op is comptime(value) then
            YogurtOp.comptime(value.comptime_cast(claimed_return_type))
              $ claimed_return_type
          else {
            YogurtOp.call(YogurtCall {
              function = cast_fun, args = list(body.returns).to_slice()
            }) $ claimed_return_type
          }
        )
        body_with_cast.&.push(cast)
        body = YogurtBody {
          params = body.params,
          exprs = body_with_cast.to_slice(),
          returns = cast,
        }
      }

      YogurtFun {
        captures = none[Slice[YogurtId]](),
        exprs = builder.exprs.to_slice(),
        body,
      }
    }
    case builtin(builtin) builtin.compile(param_types, egg, yogurt)?

  println("Done compiling {signature}")

  yogurt.funs.&.put(signature, fun_)
  ok[YogurtFun, Error](fun_)
}

fun compile(
  body: EggBody, params: Slice[YogurtId],
  builder: &YogurtFunBuilder, compiler: &YogurtCodeCompiler
): Result[YogurtBody, Error] {
  params.len == body.params.len or
    panic("body params len doesn't match the number of param types")
  var exprs = list[YogurtId]()
  for egg_id in body.exprs do {
    var yogurt_id = compiler.code.get(egg_id)
      .compile(builder, compiler, exprs.&)?
    compiler.add_mapping(egg_id, yogurt_id)
  }
  ok[YogurtBody, Error](YogurtBody {
    params, exprs = exprs.to_slice(), returns = compiler.lookup(body.returns)
  })
}
fun compile(
  expr: EggExpr, builder: &YogurtFunBuilder, compiler: &YogurtCodeCompiler,
  body: &List[YogurtId],
): Result[YogurtId, Error] {
  var id =
    switch expr.kind
    case param unreachable()
    case int(int) builder.push(yogurt_value_int(int).to_expr())
    case string(string) builder.push(yogurt_value_string(string).to_expr())
    case symbol(symbol) builder.push(yogurt_value_symbol(symbol).to_expr())
    case struct_(struct_) {
      var fields = map[String, YogurtId]()
      var field_types = map[String, PlumType]()
      for field in struct_ do {
        var field_id = compiler.lookup(field.value)
        var type = builder.get(field_id).type
        fields.&.put(field.key, field_id)
        field_types.&.put(field.key, type)
      }
      var type = PlumType.struct_(field_types)

      var is_comptime = true
      for field in fields do
        if not(builder.get(field.value).op is comptime) then is_comptime = false

      builder.push({
        if is_comptime
        then YogurtOp.comptime(YogurtValueKind.struct_({
          var comptime_fields = map[String, YogurtValue]()
          for field in fields do
            comptime_fields.&.put(
              field.key, builder.get(field.value).op.comptime.unwrap())
          comptime_fields
        }) $ type)
        else YogurtOp.struct_(fields)
      } $ type)
    }
    case member(member) {
      var of = compiler.lookup(member.of)
      var of_type = builder.get(of).type.extend_one_level()
      var of_fields = of_type.struct_
        or return error[YogurtId, Error](error(
          "Looked for member on non-struct: {of_type}", expr.src
        ))
      var type = of_fields.get_maybe(member.name)
        or return error[YogurtId, Error](error(
          "{member.name} doesn't exist: {of_fields}", expr.src
        ))

      builder.push({
        if builder.get(of).op is comptime(value)
        then YogurtOp.comptime(value.kind.struct_.unwrap().get(member.name))
        else YogurtOp.member(YogurtMember { of, name = member.name })
      } $ type)
    }
    case switch_(switch_) {
      var condition = compiler.lookup(switch_.condition)
      var condition_expr = builder.get(condition)
      var condition_type = condition_expr.type.extend_one_level()
      var condition_variants = condition_type.enum_
        or return error[YogurtId, Error](error(
          "Switched on non-enum: {condition_type}", expr.src
        ))

      | Make sure all variants are handled, that no extra variants are handled,
      | and that the number of parameters of each case match the variant args.
      for variant in condition_variants do
        switch_.cases.contains(variant.key) or
          return error[YogurtId, Error](error(
            "you switch on {condition_type}, but you don't handle the {variant.key} variant",
            expr.src
          ))
      for case_ in switch_.cases do
        condition_variants.contains(case_.key) or
          return error[YogurtId, Error](error(
            "you switch on {condition_type} and you try to handle the non-existent {case_.key} variant",
            expr.src
          ))
      for case_ in switch_.cases do {
        var variant_args = condition_variants.get(case_.key)
        var case_params = case_.value.params
        variant_args.len == case_params.len or
          return error[YogurtId, Error](error(
            "{case_.key} has {variant_args.len} args, but your case binds {case_params.len}",
            expr.src
          ))
      }

      if condition_expr.op is comptime(condition_value) then {
        | If the condition is comptime-known, then we only compile the
        | corresponding branch.
        var actual_variant = condition_value.kind.variant.unwrap()
        var case_ = switch_.cases.get(actual_variant.symbol)

        var params = list[YogurtId]()
        for payload in actual_variant.payloads do
          params.&.push(builder.push(payload.to_expr()))
        var params = params.to_slice()
        for both in zip(case_.params.iter(), params.iter()) do
          compiler.&.add_mapping(both.a, both.b)

        var case_body = case_.compile(params, builder, compiler)?

        for id in case_body.params do body.push(id)
        for id in case_body.exprs do body.push(id)
        case_body.returns
      } else {
        | The condition of the switch is only known at runtime. Compile all
        | branches.

        | Lower all cases.
        var cases = map[String, YogurtBody]()
        var case_types = list[PlumType]()
        for variant in condition_variants do {
          var case_ = switch_.cases.get(variant.key)

          var params = none[Slice[YogurtId]]()
          if condition_expr.op is comptime(condition_value) then {
            var actual_variant = condition_value.kind.variant.unwrap()
            if actual_variant.symbol == variant.key then {
              var ids = list[YogurtId]()
              for payload in actual_variant.payloads do
                ids.&.push(builder.push(payload.to_expr()))
              params = some(ids.to_slice())
            }
          }
          var params = params or {
            var ids = list[YogurtId]()
            for type in variant.value do
              ids.&.push(builder.push(YogurtOp.param $ type))
            ids.to_slice()
          }
          for both in zip(case_.params.iter(), params.iter()) do
            compiler.&.add_mapping(both.a, both.b)

          var body = case_.compile(params, builder, compiler)?
          cases.&.put(variant.key, body)
          case_types.&.push(builder.get(body.returns).type)
        }

        | Find the common type of all branches.
        var common_type = union(case_types.to_slice())
          or return error[YogurtId, Error](error("Couldn't union types {case_types}", expr.src))

        | Add cast expressions where necessary.
        for case_ in cases do {
          var case_expr = builder.get(case_.value.returns)
          var case_type = case_expr.type
          if case_type != common_type then {
            var old_body = case_.value
            var new_exprs = list[YogurtId]()
            for expr in old_body.exprs do new_exprs.&.push(expr)
            var new_returns = builder.push({
              if case_expr.op is comptime(value)
              then YogurtOp.comptime(value.comptime_cast(common_type))
              else YogurtOp.call(YogurtCall {
                function = compiler.yogurt.compile_cast_fun(case_type, common_type),
                args = list(old_body.returns).to_slice()
              })
            } $ common_type)
            new_exprs.&.push(new_returns)
            cases.&.put(case_.key, YogurtBody {
              params = old_body.params,
              exprs = new_exprs.to_slice(),
              returns = new_returns,
            })
          }
        }

        if condition_expr.op is comptime(value) then {
          var value = value.kind.variant.unwrap()
          var variant = value.symbol
          var case_body = cases.get(variant)
          for id in case_body.params do body.push(id)
          for id in case_body.exprs do body.push(id)
          case_body.returns
        } else
          builder.push(
            YogurtOp.switch_(YogurtSwitch { condition, cases }) $ common_type
          )
      }
    }
    case lambda(lambda) {
      | Figure out which variables the lambda captures and look these up in the
      | current scope.
      var captured_egg_ids = expr.captured_variables(compiler.code)

      var captures = list[YogurtId]()
      for egg_id in captured_egg_ids do
        captures.&.push(compiler.lookup(egg_id))
      var captures = captures.to_slice()

      | Compile the lambda body into a stand-alone function that takes the
      | closure as an explicit first argument.
      var function = {
        var lambda_builder = yogurt_fun_builder()
        var lambda_compiler = YogurtCodeCompiler {
          egg = compiler.egg, code = compiler.code, yogurt = compiler.yogurt,
          egg_to_yogurt = map[EggId, YogurtId]()
        }

        var inner_captures = list[YogurtId]() | captured values from the pov of the lambda
        for ids in zip(captured_egg_ids.iter(), captures.iter()) do {
          var yogurt_id = lambda_builder.&.push(
            YogurtOp.param $ builder.get(ids.b).type
          )
          inner_captures.&.push(yogurt_id)
          lambda_compiler.&.add_mapping(ids.a, yogurt_id)
        }
        var params = list[YogurtId]()
        for i in 0..lambda.params.len do {
          var egg_id = lambda.body.params.get(i)
          var yogurt_id = lambda_builder.&.push(
            YogurtOp.param $ lambda.params.get(i).type
          )
          params.&.push(yogurt_id)
          lambda_compiler.&.add_mapping(egg_id, yogurt_id)
        }
        var exprs = list[YogurtId]()
        for egg_id in lambda.body.exprs do {
          var yogurt_id = lambda_compiler.code.get(egg_id)
            .compile(lambda_builder.&, lambda_compiler.&, exprs.&)?
          lambda_compiler.&.add_mapping(egg_id, yogurt_id)
        }
        var lambda_body = YogurtBody {
          params = params.to_slice(),
          exprs = exprs.to_slice(),
          returns = lambda_compiler.lookup(lambda.body.returns),
        }

        var function = yogurt_signature("lambda-{expr.src}", empty_slice[PlumType]())
        compiler.yogurt.funs.&.put(function, YogurtFun {
          exprs = lambda_builder.exprs.to_slice(),
          captures = some(inner_captures.to_slice()),
          body = lambda_body,
        })
        function
      }

      | eprintln(lambda_compiler.egg_to_yogurt)

      | Create a lambda that contains both the closure and a function pointer.
      var type = PlumType.lambda(LambdaType {
        args = {
          var param_types = list[PlumType]()
          for param in lambda.params do param_types.&.push(param.type)
          param_types.to_slice()
        },
        return_type = compiler.yogurt.funs.get(function)
          .return_type().put_on_heap(),
      })
      var is_comptime = false
      | for capture in captured do
      |   if not(builder.get(capture).op is comptime) then is_comptime = false
      builder.push({
        | if is_comptime
        | then
        |   YogurtOp.comptime(YogurtValueKind.lambda(YogurtLambdaValue {
        |     captures = {
        |       var captures = list[YogurtValue]()
        |       for capture in captured do
        |         captures.&.push(builder.get(capture).op.comptime.unwrap())
        |       captures.to_slice()
        |     },
        |     function,
        |   }) $ type)
        | else
          YogurtOp.lambda(YogurtLambda { captures, function })
      } $ type)
    }
    case lambda_call(call) {
      var lambda = compiler.lookup(call.lambda)

      var args = list[YogurtId]()
      for arg in call.args do args.&.push(compiler.lookup(arg))
      var args = args.to_slice()

      | Make sure arg types match the lambda type.
      var lambda_type = builder.get(lambda).type.lambda or
        return error[YogurtId, Error](error(
          "Called non-lambda ({builder.get(lambda).type})",
          expr.src,
        ))
      for both in zip(args.iter(), lambda_type.args.iter()) do {
        var actual_type   = builder.get(both.a).type
        var expected_type = both.b
        | TODO: relax?
        actual_type == expected_type or
          return error[YogurtId, Error](error(
            "Lambda expects {expected_type}, got {actual_type})",
            expr.src,
          ))
      }
      var return_type = lambda_type.return_type.*

      var are_all_args_comptime = true
      for arg in args do
        if not(builder.get(arg).op is comptime) then
          are_all_args_comptime = false
      var comptime_result = are_all_args_comptime

      if comptime_result and false then {
        | body.push(builder.push(YogurtOp.lambda_call(YogurtCall {
        |   function = yogurt_signature(name.string, arg_params), args
        | }) $ type))
        | if compiled_fun.body.returns.int == -1 then {
        |   return error[YogurtId, Error](error(
        |     "A function with only comptime known arguments calls itself with those same arguments. 
        |     'We can't run this at comptime.",
        |     expr.src,
        |   ))
        | }
        | var returned_expr = compiled_fun.get(compiled_fun.body.returns)
        | var value = returned_expr.op.comptime
        |   .unwrap("value should be comptime known,but it's {returned_expr.op.debug()}")
        | builder.push(YogurtOp.comptime(value) $ type)
        todo()
      } else {
        builder.push(
          YogurtOp.lambda_call(YogurtLambdaCall { lambda, args }) $ return_type
        )
      }
    }
    case call(call) {
      var name = call.function

      var args = list[YogurtId]()
      for arg in call.args do args.&.push(compiler.lookup(arg))
      var args = args.to_slice()

      var arg_types = list[PlumType]()
      for arg in args do arg_types.&.push(builder.get(arg).type)
      var arg_types = arg_types.to_slice()

      var result = compiler.egg.lookup(name.string, arg_types) or(error)
        return error[YogurtId, Error](error(error, name.src))

      var are_all_args_comptime = true
      for arg in args do
        if not(builder.get(arg).op is comptime) then
          are_all_args_comptime = false

      | TODO: run builtin type of also at comptime
      | var comptime_result = are_all_args_comptime or name.string == "builtin_type_of"
      if are_all_args_comptime then {
        var arg_values = list[YogurtValue]()
        for arg in args do arg_values.&.push(builder.get(arg).op.comptime.unwrap())
        var arg_values = arg_values.to_slice()

        var result = result.fun_.run(
          arg_values,
          result.substitutions, name.string, compiler.egg, compiler.yogurt
        )
        switch result
        case returns(value) builder.push(value.to_expr())
        case runtime_crash(crash) {
          var message = builder.push(yogurt_value_string(crash.a).to_expr())
          builder.push(YogurtOp.instruction(YogurtInstruction {
            instruction = Instruction.crash,
            args = list(message).to_slice(),
          }) $ crash.b)
        }
        case comptime_error(message)
          return error[YogurtId, Error](error(message, name.src))
      } else {
        var compiled_fun = result.fun_.compile(
          result.substitutions, name.string, compiler.egg, compiler.yogurt
        )?
        var type = result.fun_.return_type.specialize(result.substitutions)

        builder.push(
          YogurtOp.call(YogurtCall {
            function = yogurt_signature(name.string, arg_types), args
          }) $ type
        )
      }
    }
    case variant(variant) {
      var symbol = variant.symbol

      var payloads = list[YogurtId]()
      var payload_types = list[PlumType]()
      for payload in variant.payloads do {
        var payload = compiler.lookup(payload)
        var type = builder.get(payload).type
        payloads.&.push(payload)
        payload_types.&.push(type)
      }
      var payloads = payloads.to_slice()
      var payload_types = payload_types.to_slice()
      var type = PlumType.enum_(map(symbol -> payload_types))

      var is_comptime = true
      for payload in payloads do
        if not(builder.get(payload).op is comptime) then is_comptime = false

      builder.push({
        if is_comptime
        then YogurtOp.comptime(YogurtValueKind.variant(YogurtVariantValue {
          symbol,
          payloads = {
            var comptime_payloads = list[YogurtValue]()
            for payload in payloads do
              comptime_payloads.&.push(builder.get(payload).op.comptime.unwrap())
            comptime_payloads.to_slice()
          }
        }) $ type)
        else YogurtOp.variant(YogurtVariant { symbol, payloads })
      } $ type)
    }
  body.push(id)
  ok[YogurtId, Error](id)
}


fun captured_variables(expr: EggExpr, code: EggCode): Slice[EggId] {
  var ignore = set[EggId]()
  var captured = list[EggId]()
  expr.collect_captured(ignore.&, captured.&, code)
  captured.to_slice()
}
fun collect_captured(id: EggId, ignore: &Set[EggId], captured: &List[EggId]) {
  if not(ignore.contains(id)) then {
    captured.push(id)
    ignore.put(id)
  }
}
fun collect_captured(
  body: EggBody, ignore: &Set[EggId], captured: &List[EggId], code: EggCode
) {
  for param in body.params do ignore.put(param)
  for id in body.exprs do {
    code.get(id).collect_captured(ignore, captured, code)
    ignore.put(id)
  }
}
fun collect_captured(
  expr: EggExpr, ignore: &Set[EggId], captured: &List[EggId], code: EggCode
) {
  switch expr.kind
  case param unreachable()
  case int {}
  case string {}
  case struct_(struct_)
    for field in struct_ do field.value.collect_captured(ignore, captured)
  case member(member) member.of.collect_captured(ignore, captured)
  case symbol {}
  case variant(variant)
    for payload in variant.payloads do payload.collect_captured(ignore, captured)
  case switch_(switch_) {
    switch_.condition.collect_captured(ignore, captured)
    for case_ in switch_.cases do
      case_.value.collect_captured(ignore, captured, code)
  }
  case lambda(lambda) lambda.body.collect_captured(ignore, captured, code)
  case lambda_call(call) {
    call.lambda.collect_captured(ignore, captured)
    for arg in call.args do arg.collect_captured(ignore, captured)
  }
  case call(call)
    for arg in call.args do arg.collect_captured(ignore, captured)
}


struct YogurtBodyBuilder { parent: &YogurtFunBuilder, body: List[YogurtId] }
fun push(body: &YogurtBodyBuilder, expr: YogurtExpr): YogurtId {
  var id = body.parent.&.push(expr)
  body.body.&.push(id)
  id
}
fun get(body: YogurtBodyBuilder, id: YogurtId): YogurtExpr {
  body.parent.get(id)
}
fun compile(
  builtin: Builtin, param_types: Slice[PlumType], egg: Egg, yogurt: &Yogurt
): Result[YogurtFun, Error] {
  var signature = yogurt_signature("builtin_{builtin}", param_types)

  var fun_builder = yogurt_fun_builder()
  var body = YogurtBodyBuilder {
    parent = fun_builder.&, body = list[YogurtId]()
  }

  var params = list[YogurtId]()
  for type in param_types do
    params.&.push(body.parent.&.push(YogurtOp.param $ type))
  var params = params.to_slice()

  var returns = builtin.compile(body.&, params) or(error)
    return error[YogurtFun, Error](error(error, invalid_src()))
  var fun_ = YogurtFun {
    exprs = fun_builder.exprs.to_slice(),
    captures = none[Slice[YogurtId]](),
    body = YogurtBody { params, exprs = body.body.to_slice(), returns }
  }

  yogurt.funs.&.put(signature, fun_)
  ok[YogurtFun, Error](fun_)
}
fun compile(
  builtin: Builtin, builder: &YogurtBodyBuilder, params: Slice[YogurtId]
): Result[YogurtId, String] {
  ok[YogurtId, String](
    switch builtin
    case add_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.add_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case sub_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.sub_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case mul_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.mul_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case div_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.div_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case mod_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.mod_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case and_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.and_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case or_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.or_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case xor_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.xor_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case compare_ints {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(
        YogurtOp.instruction(YogurtInstruction {
          instruction = Instruction.compare_ints, args = list(a, b).to_slice()
        }) $ type_ordering
      )
    }
    case concat_strings {
      var a = params.get(0)
      var b = params.get(1)
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.concat_strings, args = list(a, b).to_slice()
      }) $ type_string)
    }
    case crash {
      var message = params.get(0)
      builder.&.push(
        YogurtOp.instruction(YogurtInstruction {
          instruction = Instruction.crash, args = list(message).to_slice()
        }) $ PlumType.never
      )
    }
    case type_of {
      var value = builder.get(params.get(0))
      builder.&.push(yogurt_value_type(value.type).to_expr())
    }
    case type_info
      return error[YogurtId, String]("type_info called on Type that's not comptime")
  )
}
fun compile_cast_fun(
  yogurt: &Yogurt, from: PlumType, to: PlumType
): YogurtSignature {
  var signature = yogurt_signature("_cast {from} to {to}", empty_slice[PlumType]())
  if yogurt.funs.contains(signature) then return signature

  | When casting recursive types, we don't want the compiler to get stuck in an
  | infinite recursion. To prevent that, we put a placeholder in the Yogurt.
  yogurt.funs.&.put(signature, yogurt_fun_placeholder)

  var fun_builder = yogurt_fun_builder()
  var body = YogurtBodyBuilder {
    parent = fun_builder.&, body = list[YogurtId]()
  }
  var param = body.parent.&.push(YogurtOp.param $ from)
  var returns = yogurt.compile_cast_fun_body(from, to, body.&, param)
  var fun_ = YogurtFun {
    exprs = fun_builder.exprs.to_slice(),
    captures = none[Slice[YogurtId]](),
    body = YogurtBody {
      params = list(param).to_slice(),
      exprs = body.body.to_slice(),
      returns
    }
  }

  yogurt.funs.&.put(signature, fun_)
  signature
}
fun compile_cast_fun_body(
  yogurt: &Yogurt, from: PlumType, to: PlumType,
  builder: &YogurtBodyBuilder, param: YogurtId,
): YogurtId {
  if from is never then
    return builder.push(YogurtOp.uninitialized $ to)
  if from == to then
    return param | The cast fun is just the identity fun.

  switch to.extend_one_level()
  case struct_(struct_) {
    var cast_fields = map[String, YogurtId]()
    for field in from.extend_one_level().struct_.unwrap() do {
      var name = field.key
      var from_field_type = field.value
      var to_field_type = struct_.get(name)

      var original_id = builder.&.push(YogurtOp.member(YogurtMember {
        of = param, name
      }) $ from_field_type)
      var cast_id = builder.&.push(YogurtOp.call(YogurtCall {
        function = yogurt.compile_cast_fun(from_field_type, to_field_type),
        args = list(original_id).to_slice(),
      }) $ to_field_type)

      cast_fields.&.put(name, cast_id)
    }

    builder.push(YogurtOp.struct_(cast_fields) $ to)
  }
  case enum_(to_variants) {
    var cases = map[String, YogurtBody]()
    for entry in from.extend_one_level().enum_.unwrap() do {
      var variant = entry.key
      var from_payloads = entry.value
      var to_payloads = to_variants.get(variant)

      var case_builder = YogurtBodyBuilder {
        parent = builder.parent, body = list[YogurtId]()
      }

      var from_payloads_ids = list[YogurtId]()
      for payload in from_payloads do
        from_payloads_ids.&.push(builder.parent.push(YogurtOp.param $ payload))
      var to_payloads_ids = list[YogurtId]()
      for both in zip(zip(from_payloads.iter(), to_payloads.iter()), from_payloads_ids.iter()) do {
        var from_payload_type = both.a.a
        var to_payload_type = both.a.b
        var from_payload_id = both.b

        to_payloads_ids.&.push(case_builder.&.push(YogurtOp.call(YogurtCall {
          function = yogurt.compile_cast_fun(from_payload_type, to_payload_type),
          args = list(from_payload_id).to_slice(),
        }) $ to_payload_type))
      }

      var cast = case_builder.&.push(YogurtOp.variant(YogurtVariant {
        symbol = variant, payloads = to_payloads_ids.to_slice()
      }) $ to)

      var body = YogurtBody {
        params = from_payloads_ids.to_slice(),
        exprs = case_builder.body.to_slice(),
        returns = cast,
      }

      cases.&.put(variant, body)
    }
    builder.push(YogurtOp.switch_(YogurtSwitch { condition = param, cases }) $ to)
  }
  default panic("casting {from} to {to} is not supported")
}
