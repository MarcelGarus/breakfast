| Types in Plum  
| Plum has a structural type system, which means that types don't have
| identities. If you define Foo = Int and Bar = Int, then Foo, Bar, and Int can
| be used interchangably. Starting with the Egg compiler stage, all types are
| self-contained and you don't any type definitions any more.
|
| This file contains most operations that we need to perform on types.

import plum.mar

enum PlumType {
  primitive: String,
  never,
  enum_: Map[String, Slice[PlumType]],
  recursive: Int,
}

var type_int = PlumType.primitive("Int")
var type_string = PlumType.primitive("String")
var type_type = PlumType.primitive("Type")
var type_never = PlumType.never
var type_ordering = PlumType.enum_(map(
  "Less"    -> empty_slice[PlumType](),
  "Equal"   -> empty_slice[PlumType](),
  "Greater" -> empty_slice[PlumType](),
))
var type_type_info = PlumType.enum_(map(
  "Int"    -> empty_slice[PlumType](),
  "String" -> empty_slice[PlumType](),
  "Type"   -> empty_slice[PlumType](),
  "Enum"   -> empty_slice[PlumType](),
))

fun ==(a: PlumType, b: PlumType): Bool {
  switch a
  case primitive(a) if b is primitive(b) then a == b else false
  case never(a)     if b is never(b)     then a == b else false
  case enum_(a)     if b is enum_(b)     then a == b else false
  case recursive(a) if b is recursive(b) then a == b else false
}
fun hash(hasher: &Hasher, type: PlumType) {
  switch type
  case primitive { hasher.hash(0) }
  case never     { hasher.hash(1) }
  case enum_     { hasher.hash(2) }
  case recursive { hasher.hash(3) }
}

fun write[W](writer: W, type: PlumType) {
  switch type
  case primitive(name) writer."{name}"
  case never writer."Never"
  case enum_(variants) {
    writer."(| "
    var first = true
    for variant in variants do {
      if first then first = false else writer." "
      if variant.value.is_not_empty() then writer."("
      writer."{variant.key}"
      for arg in variant.value do writer." {arg}"
      if variant.value.is_not_empty() then writer.")"
    }
    writer.")"
  }
  case recursive(level) writer."^{level}"
}


| Matching Types  
| Checks if a concrete type without type variables is assignable to a generic
| type that possibly contains type variables. Returns a substitution map of what
| concrete types the type variables need to have for the types to match.
|
| Int            -> Int           ? {}
| Int            -> String        ? -
| Int            -> t             ? {t: Int}
| List Int       -> List t        ? {t: Int}
| Map Int String -> Map t t       ? -
| Never          -> Int           ? {}
| Never          -> List t        ? {}
| Never          -> Never         ? {}
| | Foo Bar      -> | Foo Bar Baz ? {}
fun match_against(
  concrete: PlumType, generic: PlumType
): Maybe[Substitutions] {
  var constraints = constraints()
  concrete.match_against(
    generic, constraints.&,
    list[Tuple2[PlumType, PlumType]]().&
  ) or return none[Substitutions]()
  constraints.check_coherency()
}
fun match_against(
  concrete: Slice[PlumType], generic: Slice[PlumType]
): Maybe[Substitutions] {
  var constraints = constraints()
  concrete.match_against(
    generic, constraints.&,
    list[Tuple2[PlumType, PlumType]]().&
  ) or return none[Substitutions]()
  constraints.check_coherency()
}
| A mapping from type variables (lowercase) to concrete types that they need to
| be replaced with.
struct Substitutions { substitutions: Map[String, PlumType] }
struct TypeVariableConstraints {
  constraints: List[Tuple2[String, PlumType]]
}
fun constraints(): TypeVariableConstraints {
  TypeVariableConstraints {
    constraints = list[Tuple2[String, PlumType]]()
  }
}
fun check_coherency(
  constraints: TypeVariableConstraints
): Maybe[Substitutions] {
  var substitutions = map[String, PlumType]()
  var works = true
  for constraint in constraints.constraints do {
    var variable = constraint.a
    var concrete = constraint.b
    if substitutions.get_maybe(variable) is some(type) then {
      type =~= concrete or { works = false break }
      {}
    } else substitutions.&.put(variable, concrete)
  }
  if works
  then some(Substitutions { substitutions })
  else none[Substitutions]()
}
fun match_against(
  concrete: PlumType, generic: PlumType,
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[PlumType, PlumType]],
): Bool {
  if currently_matching.iter().&.find(tuple(concrete, generic)) is some(index)
  then return true

  currently_matching.push(tuple(concrete, generic))

  concrete = concrete.extend_one_level()
  generic = generic.extend_one_level()
  var result = match_against_logic(
    concrete, generic, constraints, currently_matching
  )

  currently_matching.pop()
  result
}
fun match_against_logic(
  concrete: PlumType, generic: PlumType,
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[PlumType, PlumType]],
): Bool {
  if concrete is never then return true

  switch generic
  case primitive(generic_name) {
    var is_type_variable = generic_name.chars().get(0).is_upper().not()
    if is_type_variable then {
      constraints.constraints.&.push(tuple(generic_name, concrete))
      true
    } else {
      var concrete_name = concrete.primitive or return false
      concrete_name == generic_name
    }
  }
  case never concrete is never
  case enum_(generic_variants) {
    var concrete_variants = concrete.enum_ or return false
    for variant in concrete_variants do {
      var concrete_args = variant.value
      var generic_args = generic_variants.get_maybe(variant.key) or return false
      concrete_args.match_against(generic_args, constraints, currently_matching)
    }
    true
  }
  case recursive todo()
}
fun match_against(
  concrete: Slice[PlumType], generic: Slice[PlumType],
  constraints: &TypeVariableConstraints,
  currently_matching: &List[Tuple2[PlumType, PlumType]],
): Bool {
  concrete.len == generic.len or return false
  for both in zip(concrete.iter(), generic.iter()) do
    both.a.match_against(both.b, constraints, currently_matching) or
      return false
  true
}


| Specializing types  
| For example, specializing (List t) using {t -> Int} to (List Int).

fun specialize(
  type: PlumType, substitutions: Substitutions
): PlumType {
  switch type
  case primitive(name)
    substitutions.substitutions.get_maybe(name) or PlumType.primitive(name)
  case never PlumType.never
  case enum_(enum_) {
    var variants = map[String, Slice[PlumType]]()
    for variant in enum_ do {
      var args = list[PlumType]()
      for arg in variant.value do args.&.push(arg.specialize(substitutions))
      variants.&.put(variant.key, args.to_slice())
    }
    PlumType.enum_(variants)
  }
  case recursive(level) PlumType.recursive(level)
}


| Navigating into types  
| When navigating into types, you can't just naively take the contained types
| because they might refer to surrounding types via recursive types. This
| function extends recursive calls that reference the root type so that when you
| navigate into this type, the resulting types are still self-contained.
|
| For example, if you have this type:
|
| | A
|   B
|     | C
|       D ^2
|
| If you switch on a value of this type, the enum payload in the B case should
| have this type:
|
| | C
|   D
|     | A
|       B ^2
|
| As you see, we can't just naively take the type of the B variant because it
| refers to the outer type that we remove. Having ^2 in a type where there are
| no two types surrounding it is bad. So, types need to "wrap around" -- as you
| navigate into types, recursive types should be extended at the bottom so that
| you never actually reach a recursive marker.
|
| In particular, we need to extend all recursive types that refer to the former
| root type. To do that, we first create an extension that root-recursive types
| will be extended with:
|
| | A
|   B ^-1
|
| The -1 is just a temporary marker that means "replace this so that it points
| to the new root". Then, we walk the original type and replace all recursive
| types that reference the root with this extension, replacing -1 with the level
| that we are currently at.
fun extend_one_level(type: PlumType): PlumType {
  switch type
  case primitive(name) PlumType.primitive(name)
  case never PlumType.never
  case enum_(variants) PlumType.enum_({
    var new_variants = map[String, Slice[PlumType]]()
    for variant in variants do
      new_variants.&.put(variant.key, {
        var args = list[PlumType]()
        for arg in variant.value.iter().enumerate() do
          args.&.push({
            | Type that is the original enum except the variant that we navigate into.
            | This variant has been replaced with a recursive type.
            var extension = {
              var ext_variants = map[String, Slice[PlumType]]()
              for ext_variant in variants do
                ext_variants.&.put(
                  ext_variant.key,
                  if ext_variant.key == variant.key then {
                    var ext_args = list[PlumType]()
                    for ext_arg in variant.value.iter().enumerate() do
                      ext_args.&.push(
                        if arg.index == ext_arg.index then
                          PlumType.recursive(-1)
                        else
                          ext_arg.item
                      )
                    ext_args.to_slice()
                  }
                  else ext_variant.value
                )
              PlumType.enum_(ext_variants)
            }
            arg.item.extend_recursive_types(1, extension)
          })
        args.to_slice()
      })
    new_variants
  })
  case recursive unreachable()
}
fun extend_recursive_types(
  type: PlumType, level: Int, extension: PlumType
): PlumType {
  switch type
  case primitive(name) PlumType.primitive(name)
  case never PlumType.never
  case enum_(variants) {
    var new_variants = map[String, Slice[PlumType]]()
    for variant in variants do
      new_variants.&.put(variant.key, {
        var args = list[PlumType]()
        for arg in variant.value do
          args.&.push(arg.extend_recursive_types(level + 1, extension))
        args.to_slice()
      })
    PlumType.enum_(new_variants)
  }
  case recursive(actual_level)
    if actual_level == level then
      extension.replace_recursive_level(-1, level)
    else
      PlumType.recursive(actual_level)
}
fun replace_recursive_level(type: PlumType, from: Int, to: Int): PlumType {
  switch type
  case primitive(name) PlumType.primitive(name)
  case never PlumType.never
  case enum_(variants) {
    var new_variants = map[String, Slice[PlumType]]()
    for variant in variants do
      new_variants.&.put(variant.key, {
        var args = list[PlumType]()
        for arg in variant.value do
          args.&.push(arg.replace_recursive_level(from, to))
        args.to_slice()
      })
    PlumType.enum_(new_variants)
  }
  case recursive(actual_level)
    PlumType.recursive(if actual_level == from then to else actual_level)
}


| Comparing types  
| Multiple types may describe the same set of values. For example, these two
| types are semantically equivalent:
|
| First =
|   | A
|     B ^1
| Second =
|   | A
|     B
|       | A
|         B ^2
fun =~=(a: PlumType, b: PlumType): Bool {
  is_equivalent(a, b, list[Tuple2[PlumType, PlumType]]().&)
}
fun is_equivalent(
  a: PlumType, b: PlumType,
  currently_comparing: &List[Tuple2[PlumType, PlumType]],
): Bool {
  if currently_comparing.iter().&.contains(tuple(a, b)) then return true

  currently_comparing.push(tuple(a, b))

  a = a.extend_one_level()
  b = b.extend_one_level()
  var result = is_equivalent_logic(a, b, currently_comparing)

  currently_comparing.pop()
  result
}
fun is_equivalent_logic(
  a: PlumType, b: PlumType,
  currently_comparing: &List[Tuple2[PlumType, PlumType]],
): Bool {
  switch a
  case primitive(name) {b.primitive or return false} == name
  case never  b is never
  case enum_(a_variants) {
    var b_variants = b.enum_ or return false
    a_variants.size == b_variants.size or return false

    for a_variant in a_variants do {
      var a_args = a_variant.value
      var b_args = b_variants.get_maybe(a_variant.key) or return false
      a_args.len == b_args.len or return false
      for both in zip(a_args.iter(), b_args.iter()) do
        is_equivalent(both.a, both.b, currently_comparing) or return false
    }
    true
  }
  case recursive unreachable()
}


| Joining types  
| When multiple branches evaluate to different types, those need to be joined to
| get the overall result type. In that case, we need to make sure that all types
| "line up" -- for example, you can't have one branch evaluate to an Int and
| another one to a String. This process of joining types is implemented here.
|
| A more complex example:
|
| First =
|   | A ^1
|     B ^1
| Second =
|   | A ^1
|     C ^C
| Joined =
|   | A ^1
|     B
|       | A ^1
|         B ^1
|     C
|       | A ^1
|         C ^1
|
| Here, we have two enum types that are joined. The resulting type contains a
| recursive A variant. As soon as either B or C occur, we know from which
| original type this value stems, so we have a more precise type for the
| contained payload.
fun join(types: Slice[PlumType]): Maybe[PlumType] {
  var common = types.get(0)
  for type in types.without_first() do
    common = join(common, type) or return none[PlumType]()
  some(common)
}
fun join(a: PlumType, b: PlumType): Maybe[PlumType] {
  join(a, b, list[Tuple2[PlumType, PlumType]]().&)
}
fun join(
  a: PlumType, b: PlumType,
  currently_joining: &List[Tuple2[PlumType, PlumType]],
): Maybe[PlumType] {
  if currently_joining.iter().&.find(tuple(a, b)) is some(index) then {
    var level = currently_joining.len - index
    return some(PlumType.recursive(level))
  }

  currently_joining.push(tuple(a, b))

  a = a.extend_one_level()
  b = b.extend_one_level()
  var result = join_logic(a, b, currently_joining)

  currently_joining.pop()
  result
}
fun join_logic(
  a: PlumType, b: PlumType,
  currently_joining: &List[Tuple2[PlumType, PlumType]],
): Maybe[PlumType] {
  if a is never then return some(b)
  if b is never then return some(a)

  switch a
  case primitive(a_name) {
    var b_name = b.primitive or return none[PlumType]()
    a_name == b_name or return none[PlumType]()
    some(PlumType.primitive(a_name))
  }
  case never unreachable()
  case enum_(a_variants) {
    var b_variants = b.enum_ or return none[PlumType]()
    var variants = map[String, Slice[PlumType]]()
    for variant in a_variants do variants.&.put(variant.key, variant.value)
    for variant in b_variants do {
      var key = variant.key
      var b_args = variant.value
      variants.&.put(key, {
        if variants.get_maybe(key) is some(a_args) then {
          a_args.len == b_args.len or return none[PlumType]()
          var args = list[PlumType]()
          for both in zip(a_args.iter(), b_args.iter()) do
            args.&.push(join(both.a, both.b, currently_joining) or
              return none[PlumType]())
          args.to_slice()
        } else b_args
      })
    }
    some(PlumType.enum_(variants))
  }
  case recursive unreachable()
}


| Checking if one type can be assigned to another  
| Types are really just sets of values. One type is considered to be assignable
| to another type if all values of the first type are also values of the second
| type.
fun is_assignable_to(from: PlumType, to: PlumType): Bool {
  {join(from, to) or return false} =~= to
}
