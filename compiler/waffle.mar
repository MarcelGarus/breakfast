| Well-Aligned Form of Fixed-Layout Expressions  
|
| This compiler stage is pretty low-level. It's no longer graph based, but
| mainly tree based â€“ as a preparation for lowering to stack-based byte code.
| Types no longer exist. Instead, each expression corresponds to a slice of
| bytes. For expressions to be compatible (such as branches of a switch), they
| just have to have the same length.
| Structs have been converted into runs of expressions (shown using curly
| braces). Enums have been converted into tagged unions.
|
| main Int: @0:8
|   | Creating and accessing a struct.
|   | foo = & x: @0 y: 42   | & y: Int x: Int
|   | foo.y
|   @1 = {@0 42:8}.8:8
|   | Creating and switching on an enum.
|   | foo: Bool = True
|   | foo
|   | % True: Some 5
|   |   False: None
|   @2 = {1:1}.0:1 %
|     0 -> {padding:8 0:1}
|     1 -> {5:8 1:1}

import plum.mar

struct Waffle { funs: Map[WaffleSignature, WaffleFun] }
struct WaffleSignature { string: String }

| Functions here don't explicitly contain parameters. Instead, the local @0
| represents the parameters. @0 is guaranteed to exist and be on the stack when
| the function starts executing.
struct WaffleFun { locals: Slice[WaffleExpr], body: WaffleBody }
struct WaffleId { index: Int } | index into the WaffleFun's locals
struct WaffleBody { locals: Slice[WaffleId], returns: WaffleExpr }

struct WaffleExpr { size: Int, alignment: Int, kind: WaffleExprKind }
enum WaffleExprKind {
  param,
  padding: Int,
  byte: Byte, | 8 bits
  word: Int,  | 64 bits
  local: WaffleId,
  aggregate: Slice[WaffleExpr],
  member: WaffleMember,
  switch_: WaffleSwitch,
  call: WaffleCall,
  call_indirect: WaffleCallIndirect,
  function_ptr: WaffleSignature,
  add: &WaffleExpr,
  sub: &WaffleExpr,
  mul: &WaffleExpr,
  div: &WaffleExpr,
  mod: &WaffleExpr,
  and_: &WaffleExpr,
  or_: &WaffleExpr,
  xor: &WaffleExpr,
  box: &WaffleExpr,
  unbox: &WaffleExpr,
  crash: &WaffleExpr,
}
struct WaffleMember { of: &WaffleExpr, offset: Int }
struct WaffleSwitch { byte: &WaffleExpr, cases: Slice[WaffleBody] }
struct WaffleCall { function: WaffleSignature, args: &WaffleExpr }
struct WaffleCallIndirect { function_ptr: &WaffleExpr, args: &WaffleExpr }

fun waffle_padding(amount: Int): WaffleExpr {
  WaffleExpr {
    size = amount, alignment = 1, kind = WaffleExprKind.padding(amount)
  }
}
fun waffle_byte(byte: Byte): WaffleExpr {
  WaffleExpr { size = 1, alignment = 1, kind = WaffleExprKind.byte(byte) }
}
fun waffle_word(word: Int): WaffleExpr {
  WaffleExpr { size = 8, alignment = 8, kind = WaffleExprKind.word(word) }
}
fun waffle_local(id: WaffleId, size: Int, alignment: Int): WaffleExpr {
  WaffleExpr { size, alignment, kind = WaffleExprKind.local(id) }
}
fun waffle_aggregate(fields: Slice[WaffleExpr]): WaffleExpr {
  var size = 0
  var alignment = 1
  for field in fields do {
    size.is_multiple_of(field.alignment) or
      panic("badly aligned field in aggregate")
    size = size + field.size
    alignment = max(alignment, field.alignment)
  }
  WaffleExpr { size, alignment, kind = WaffleExprKind.aggregate(fields) }
}
fun waffle_member(
  of: WaffleExpr, offset: Int, size: Int, alignment: Int
): WaffleExpr {
  offset >= 0 or panic("negative offset")
  offset + size <= of.size or panic("offset too big")
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.member(WaffleMember { of = of.put_on_heap(), offset })
  }
}
fun waffle_switch(byte: WaffleExpr, cases: Slice[WaffleBody]): WaffleExpr {
  byte.size == 1 or panic("switch byte has invalid size")
  byte.alignment == 1 or panic("switch byte has invalid alignment")
  cases.is_not_empty() or panic("switch with no cases")
  var size = cases.get(0).returns.size
  var alignment = 1
  for case_ in cases do {
    size == case_.returns.size or panic("switch cases have different sizes")
    alignment = max(alignment, case_.returns.alignment)
  }
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.switch_(WaffleSwitch { byte = byte.put_on_heap(), cases })
  }
}
| The size and alignment are of the returned value, not the arguments.
fun waffle_call(
  function: WaffleSignature, args: WaffleExpr, size: Int, alignment: Int
): WaffleExpr {
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.call(WaffleCall { function, args = args.put_on_heap() })
  }
}
| The size and alignment are of the returned value, not the arguments.
fun waffle_call_indirect(
  function_ptr: WaffleExpr, args: WaffleExpr, size: Int, alignment: Int
): WaffleExpr {
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.call_indirect(WaffleCallIndirect {
      function_ptr = function_ptr.put_on_heap(), args = args.put_on_heap()
    })
  }
}
fun waffle_function_ptr(signature: WaffleSignature): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8, kind = WaffleExprKind.function_ptr(signature)
  }
}
fun is_word(expr: WaffleExpr): Bool {
  expr.size == 8 and expr.alignment == 8
}
fun waffle_int_operands(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  left.is_word() or panic("int operands, but left is not an int 64")
  right.is_word() or panic("int operands, but right is not an int 64")
  waffle_aggregate(list(left, right).to_slice())
}
fun waffle_add(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.add(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_sub(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.sub(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_mul(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.mul(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_div(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.div(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_mod(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.mod(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_and(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.and_(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_or(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.or_(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_xor(left: WaffleExpr, right: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.xor(waffle_int_operands(left, right).put_on_heap()),
  }
}
fun waffle_box(expr: WaffleExpr): WaffleExpr {
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.box(expr.put_on_heap())
  }
}
fun waffle_unbox(expr: WaffleExpr, size: Int, alignment: Int): WaffleExpr {
  expr.size == 8 or panic("expected pointer")
  expr.alignment == 8 or panic("expected pointer")
  WaffleExpr {
    size, alignment,
    kind = WaffleExprKind.unbox(expr.put_on_heap())
  }
}
fun waffle_crash(message_ptr: WaffleExpr, message_len: WaffleExpr): WaffleExpr {
  message_ptr.is_word() or panic("crash, but message_ptr is not a word")
  message_len.is_word() or panic("crash, but message_len is not a word")
  WaffleExpr {
    size = 8, alignment = 8,
    kind = WaffleExprKind.crash(
      waffle_aggregate(list(message_ptr, message_len).to_slice()).put_on_heap()
    ),
  }
}
struct WaffleFunBuilder { locals: List[WaffleExpr] }
struct WaffleBodyBuilder {
  local_exprs: &List[WaffleExpr], local_ids: List[WaffleId], alignment: Int
}
fun waffle_fun_builder(args_size: Int, args_alignment: Int): WaffleFunBuilder {
  WaffleFunBuilder {
    locals = list(WaffleExpr {
      size = args_size, alignment = args_alignment,
      kind = WaffleExprKind.param,
    })
  }
}
fun body(builder: &WaffleFunBuilder): WaffleBodyBuilder {
  WaffleBodyBuilder {
    local_exprs = builder.locals.&, local_ids = list[WaffleId](), alignment = 1
  }
}
fun local(builder: &WaffleBodyBuilder, expr: WaffleExpr): WaffleExpr {
  var id = WaffleId { index = builder.local_exprs.len }
  builder.local_exprs.push(expr)
  builder.local_ids.&.push(id)
  builder.alignment = max(builder.alignment, expr.alignment)
  waffle_local(id, expr.size, expr.alignment)
}
fun returns(builder: WaffleBodyBuilder, expr: WaffleExpr): WaffleBody {
  WaffleBody { locals = builder.local_ids.to_slice(), returns = expr }
}
fun finish(builder: WaffleFunBuilder, body: WaffleBody): WaffleFun {
  WaffleFun { locals = builder.locals.to_slice(), body }
}

fun get(fun_: WaffleFun, id: WaffleId): WaffleExpr { fun_.locals.get(id.index) }

fun ==(a: WaffleId, b: WaffleId): Bool { a.index == b.index }
fun hash(hasher: &Hasher, id: WaffleId) { hasher.hash(id.index) }

| fun waffle_signature(
|   name: String, params: Slice[WaffleParam]
| ): WaffleSignature {
|   var b = string_builder().&
|   b."{name}"
|   for param in params do
|     b." {switch param case comptime(val) "{val}:{val.type}" case runtime(type) "{type}"}"
|   WaffleSignature { str = b.to_string() }
| }
fun ==(a: WaffleSignature, b: WaffleSignature): Bool { a.string == b.string }
fun hash(hasher: &Hasher, sig: WaffleSignature) { hasher.hash(sig.string) }


fun write[W](writer: W, waffle: Waffle) {
  var first = true
  for fun_ in waffle.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}: (@0:{fun_.value.get(WaffleId { index = 0 }).size} contains args)\n"
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, signature: WaffleSignature) {
  writer."{signature.string}"
}
fun write[W](writer: W, id: WaffleId) { writer."@{id.index}" }
fun write[W](writer: W, body: WaffleBody, fun_: WaffleFun, indentation: Int) {
  for id in body.locals do {
    var expr = fun_.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}:{expr.size} = "
    writer.write(expr, fun_, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer.write(body.returns, fun_, indentation)
}
fun write[W](
  writer: W, expr: WaffleExpr, fun_: WaffleFun, indentation: Int
) {
  switch expr.kind
  case param unreachable()
  case padding(amount) writer."padding:{amount}"
  case byte(byte) writer."{byte}:1"
  case word(word) writer."{word}:8"
  case local(id) writer."{id}"
  case aggregate(aggregate) {
    writer."\{"
    var first = true
    for field in aggregate do {
      if first then first = false else writer.", "
      writer.write(field, fun_, indentation + 1)
    }
    writer."\}"
  }
  case member(member) {
    writer.write(member.of.*, fun_, indentation)
    writer.".{member.offset}:{expr.size}"
  }
  case switch_(switch_) {
    writer.write(switch_.byte.*, fun_, indentation)
    writer." %"
    for case_ in switch_.cases.iter().enumerate() do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.index} -> \{"
      writer."\n"
      writer.write(case_.item, fun_, indentation + 2)
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  \}"
    }
  }
  case call(call) {
    writer."({call.function} "
    writer.write(call.args.*, fun_, indentation)
    writer.")"
  }
  case call_indirect(call) {
    writer."(*("
    writer.write(call.function_ptr.*, fun_, indentation)
    writer.") "
    writer.write(call.args.*, fun_, indentation)
    writer.")"
  }
  case function_ptr(signature) writer."&({signature})"
  case add(ops) {
    writer."(add "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case sub(ops) {
    writer."(sub "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case mul(ops) {
    writer."(mul "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case div(ops) {
    writer."(div "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case mod(ops) {
    writer."(mod "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case and_(ops) {
    writer."(and "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case or_(ops) {
    writer."(or "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case xor(ops) {
    writer."(xor "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
  case box(expr) {
    writer."box("
    writer.write(expr.*, fun_, indentation)
    writer.")"
  }
  case unbox(ptr) {
    writer."unbox("
    writer.write(ptr.*, fun_, indentation)
    writer."):{expr.size}"
  }
  case crash(ops) {
    writer."(crash "
    writer.write(ops.*, fun_, indentation)
    writer.")"
  }
}
