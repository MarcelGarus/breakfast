| The Virtual Machine  
|
| Internally, code runs in a stack-based virtual machine (VM), something like a
| mini-computer implemented in software. The VM has its own data stack and call
| stack and operates on instructions (called byte code instructions). From the
| point of view of the VM, Plum types no longer exist. Instead, the instructions
| operate on memory directly, reading from and writing to addresses.
|
| The idea is that instructions and objects live somewhere in memory. We don't
| need to keep track of them, for example by putting them in a List. They just
| float around just like our own data structures â€“ the VM just operates on their
| raw Addresses.
|
|     [object 1]                           [object2]
|
|   [instruction][instruction][instruction][instruction]
|
|                           [object 3]
|
| Fig 1: objects floating around in memory
|
| The endianness of ints and the stack direction are undefined. Other
| implementations of this byte code are free to chose whatever they want. In
| particular, this means that byte code SHOULD NOT depend on these things. For
| example, you should not push_64(5) and then use pop_8() to pop individual
| bytes.

import plum.mar

struct Vm {
  data_stack: List[Byte],
  call_stack: List[Address], | Address points to ByteCodeInstructions
}

enum ByteCodeInstruction {
  | stack stuff
  push_padding: Int, | pushes the given amount of padding bytes to the stack
  push_8: Byte,
  push_64: Int,
  push_8_from_stack: Int, | offset from the top of the stack (0 = top, etc.)
  push_64_from_stack: Int, | offset from the top of the stack (0 = top, etc.)
  pop: Int, | pops the amount
  pop_below_top: Tuple2[Int, Int], | (skip, amount). pops amount bytes below the top skip bytes
  | control flow stuff
  jump: Address,
  jump_table: Slice[Address], | pops a byte. depending on the symbol, jumps to different instruction indices
  call: Address, | calls another function. TODO: runtime-known address?
  ret, | returns from a function call
  | arithmetic stuff
  add_64, | pops two 64-bit ints, adds them, pushes the result as a 64-bit int
  sub_64, | pops two 64-bit ints, subtracts them, pushes the result as a 64-bit int
  mul_64, | pops two 64-bit ints, multiplies them, pushes the result as a 64-bit int
  div_64, | pops two 64-bit ints, divides them, pushes the result as a 64-bit int
  mod_64, | pops two 64-bit ints, mods them, pushes the result as a 64-bit int
  | binary stuff
  and_64, | pops two 64-bit ints, ands them, pushes the result as a 64-bit int
  or_64, | pops two 64-bit ints, ors them, pushes the result as a 64-bit int
  xor_64, | pops two 64-bit ints, xors them, pushes the result as a 64-bit int
  | memory stuff
  malloc, | pops alignment (8-bit), size (64-bit), pushes address (64 bits)
  store_8, | pops byte (8-bit), pops address (64-bit), stores byte to that address
  store_64, | pops int (64-bit), pops address (64-bit), stores int to that address
  load_8, | pops address (64-bit), loads byte from that address, pushes that byte
  load_64, | pops address (64-bit), loads int from that address, pushes that int
  | error stuff
  crash,
}

fun write[W](writer: W, vm: Vm) {
  writer."data stack:"
  for i in 0..vm.data_stack.len do {
    if i % 8 == 0 then writer."\n"
    writer." {"{vm.data_stack.get(i).radix(16)}".pad_left(2, #0)}"
  }
  writer."\ncall stack:"
  for call in vm.call_stack do writer." {call}"
}
fun write[W](writer: W, instruction: ByteCodeInstruction) {
  switch instruction
  case push_padding(amount)
    if amount == 0 then writer."// push_padding 0" else writer."push_padding {amount}"
  case push_8(byte) writer."push_8 {byte}"
  case push_64(int) writer."push_64 {int}"
  case push_8_from_stack(offset) writer."push_8_from_stack {offset}"
  case push_64_from_stack(offset) writer."push_64_from_stack {offset}"
  case pop(amount) if amount == 0 then writer."// pop 0" else writer."pop {amount}"
  case pop_below_top(tuple)
    if tuple.b == 0 then writer."// pop_below_top {tuple.a} {tuple.b}" else
    writer."pop_below_top {tuple.a} {tuple.b}"
  case jump(target) writer."jump {target}"
  case jump_table(table) {
    writer."jump_table"
    for target in table do writer." {target}"
  }
  case call(target) writer."call {target}"
  case ret writer."ret"
  case add_64 writer."add_64"
  case sub_64 writer."sub_64"
  case mul_64 writer."mul_64"
  case div_64 writer."div_64"
  case mod_64 writer."mod_64"
  case and_64 writer."and_64"
  case or_64 writer."or_64"
  case xor_64 writer."xor_64"
  case malloc writer."malloc"
  case store_8 writer."store_8"
  case store_64 writer."store_64"
  case load_8 writer."load_8"
  case load_64 writer."load_64"
  case crash writer."crash"
}

fun push_int(vm: &Vm, int: Int) {
  var int_bytes = Slice[Byte] {
    data = int.&.to_address(),
    len = 8,
  }
  for byte in int_bytes do vm.data_stack.&.push(byte)
}
fun pop_int(vm: &Vm): Int {
  var value = vm.data_stack.get_ref(vm.data_stack.len - 8).to_address()
    .to_reference[Int]().*
  for i in 0..8 do vm.data_stack.&.pop()
  value
}
fun call(address: Address, initial_stack: Slice[Byte]): Slice[Byte] {
  var vm = Vm {
    data_stack = initial_stack.to_list(),
    call_stack = list[Address](),
  }

  vm.call_stack.&.push(address)
  loop {
    var current_call = vm.call_stack.get_maybe_ref(vm.call_stack.len - 1) or {
      break
    }
    var instruction = current_call.*.to_reference[ByteCodeInstruction]().*
    current_call += stride_size_of[ByteCodeInstruction]()

    stdout."{vm}"
    println("running {instruction.debug()}")

    switch instruction
    case push_padding(amount) {
      for i in 0..amount do vm.data_stack.&.push(16#aa.lower_byte())
    }
    case push_8(byte) vm.data_stack.&.push(byte)
    case push_64(word) vm.&.push_int(word)
    case push_8_from_stack(offset) {
      var byte = vm.data_stack.get(vm.data_stack.len - 1 - offset)
      vm.data_stack.&.push(byte)
    }
    case push_64_from_stack(offset) {
      var start = vm.data_stack.len - 8 - offset
      for i in 0..8 do vm.data_stack.&.push(vm.data_stack.get(start + i))
    }
    case pop(amount) vm.data_stack.&.pop(amount)
    case pop_below_top(tuple) {
      var skip = tuple.a
      var amount = tuple.b
      vm.data_stack.&.remove({vm.data_stack.len - skip - amount}..+amount)
    }
    case jump(address) current_call.* = address
    case jump_table(table) {
      var byte = vm.data_stack.&.pop()
      current_call.* = table.get(byte.to_int())
    }
    case call(target) vm.call_stack.&.push(target)
    case ret vm.call_stack.&.pop().ignore()
    case add_64 vm.&.push_int(vm.&.pop_int() + vm.&.pop_int())
    case sub_64 vm.&.push_int(vm.&.pop_int() - vm.&.pop_int())
    case mul_64 vm.&.push_int(vm.&.pop_int() * vm.&.pop_int())
    case div_64 vm.&.push_int(vm.&.pop_int() / vm.&.pop_int())
    case mod_64 vm.&.push_int(vm.&.pop_int() % vm.&.pop_int())
    case and_64 vm.&.push_int(vm.&.pop_int() & vm.&.pop_int())
    case or_64 vm.&.push_int(or(vm.&.pop_int(), vm.&.pop_int()))
    case xor_64 vm.&.push_int(vm.&.pop_int() ^ vm.&.pop_int())
    case malloc {
      var alignment = vm.data_stack.&.pop().to_int()
      var size = vm.&.pop_int()
      var address = malloc(size, alignment)
      vm.&.push_int(address.cast[Address, Int]())
    }
    case store_8 {
      var byte = vm.data_stack.&.pop()
      var address = vm.&.pop_int().cast[Int, Address]()
      address.to_reference[Byte]().* = byte
    }
    case store_64 {
      var int = vm.&.pop_int()
      var address = vm.&.pop_int().cast[Int, Address]()
      address.to_reference[Int]().* = int
    }
    case load_8 {
      var address = vm.&.pop_int().cast[Int, Address]()
      vm.data_stack.&.push(address.to_reference[Byte]().*)
    }
    case load_64 {
      var address = vm.&.pop_int().cast[Int, Address]()
      vm.&.push_int(address.to_reference[Int]().*)
    }
    case crash {
      var data = vm.&.pop_int().cast[Int, Address]()
      var len = vm.&.pop_int()
      var msg = String { data, len }
      panic("VM crashed: {msg}")
    }
  }

  vm.data_stack.to_slice()
}
