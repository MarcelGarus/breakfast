| Totally Okay Abstract Syntax Tree  
| Tree that represents the syntactical language constructs.

import breakfast.mar

struct Toast { defs: Slice[ToastDef] }
struct ToastDef { name: String, kind: ToastDefKind }
enum ToastDefKind { type: ToastTypeDef, fun_: ToastFun }

struct ToastTypeDef {
  params: Slice[String],
  type: ToastType,
}
enum ToastType {
  variable: String,
  call: ToastTypeCall,
  enum_: Map[String, Slice[ToastType]],
}
struct ToastTypeCall { name: String, args: Slice[ToastType] }

struct ToastFun {
  params: Slice[ToastParam], return_type: ToastType, body: ToastExpr
}
struct ToastParam { name: String, type: ToastType }
enum ToastExpr {
  int: Int,
  string: String,
  symbol: String,
  name: String,
  switch_: ToastSwitch,
  call: ToastCall,
  var_: ToastVar,
  body: Slice[ToastExpr],
}
struct ToastSwitch { condition: &ToastExpr, cases: Slice[ToastCase] }
struct ToastCase { symbol: String, params: Slice[String], body: ToastExpr }
struct ToastCall { receiver: &ToastExpr, args: Slice[ToastExpr] }
struct ToastVar { name: String, value: &ToastExpr }

fun write[W](writer: W, toast: Toast) {
  var first = true
  for def in toast.defs do {
    if first then first = false else writer."\n"
    writer."{def.name}"
    switch def.kind
    case type(def) {
      for param in def.params do writer." {param}"
      writer." = "
      writer."{def.type}"
    }
    case fun_(def) {
      for param in def.params do writer." {param.name}: {param.type}"
      writer." -> {def.return_type}"
      writer." =\n"
      writer.write(def.body, 1)
    }
  }
}
fun write[W](writer: W, type: ToastType) {
  switch type
  case variable(variable) writer."{variable}"
  case call(call) {
    writer."({call.name}"
    for arg in call.args do writer." {arg}"
    writer.")"
  }
  case enum_(variants) {
    writer."|"
    for variant in variants do {
      writer." ({variant.key}"
      for arg in variant.value do writer." {arg}"
      writer.")"
    }
  }
}
fun write[W](writer: W, body: Slice[ToastExpr], indentation: Int) {
  var first = true
  for expr in body do {
    if first then first = false else writer."\n"
    writer.write(expr, indentation)
  }
}
fun write[W](writer: W, expr: ToastExpr, indentation: Int) {
  if not(expr is body) then
    for i in 0..indentation do writer."  "
  switch expr
  case int(int) writer."{int}"
  case string(str) writer."\"{str}\""
  case symbol(symbol) writer."{symbol}"
  case name(name) writer."{name}"
  case switch_(switch_) {
    writer."%\n"
    writer.write(switch_.condition.*, indentation + 1)
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.symbol}:\n"
      writer.write(case_.body, indentation + 2)
    }
  }
  case call(call) {
    writer."call\n"
    writer.write(call.receiver.*, indentation + 1)
    writer."\n"
    writer.write(call.args, indentation + 1)
  }
  case var_(var_) {
    writer."var {var_.name} =\n"
    writer.write(var_.value.*, indentation + 1)
  }
  case body(body) writer.write(body, indentation)
}

struct Parser { input: String, cursor: Int }
fun current(parser: Parser): Maybe[Char] {
  parser.input.chars().get_maybe(parser.cursor)
}
fun advance(parser: &Parser) { parser.cursor = parser.cursor + 1 }
fun consume_whitespace(parser: &Parser) {
  loop {
    {parser.current() or break}.is_whitespace() or break
    parser.advance()
  }
}
fun parse_int(parser: &Parser): Maybe[Int] {
  var num = 0
  var start = parser.cursor
  loop {
    var char = parser.current() or break
    char.is_digit() or break
    num = num * 10 + {char - #0}.to_int()
    parser.advance()
  }
  if start == parser.cursor then return none[Int]()
  some(num)
}
fun parse_string(parser: &Parser): Maybe[String] {
  var char = parser.current() or return none[String]()
  char == #" or return none[String]()
  parser.advance()
  var start = parser.cursor
  loop {
    var char = parser.current() or panic("string doesn't end until end of input")
    if char == #" then break
    parser.advance()
  }
  var end = parser.cursor
  parser.advance() | consume the "
  some(parser.input.substr(start..end))
}
var identifier_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_+-*/<>"
fun parse_identifier(parser: &Parser): Maybe[String] {
  var start = parser.cursor
  loop {
    var char = parser.current() or break
    identifier_chars.iter().&.contains(char) or break
    parser.advance()
  }
  var end = parser.cursor
  if start == end then return none[String]()
  var identifier = parser.input.substr(start..end)
  if identifier == "->" then {
    parser.cursor = start
    return none[String]()
  }
  some(identifier)
}
fun parse_name(parser: &Parser): Maybe[String] {
  var char = parser.current() or return none[String]()
  not(char.is_upper()) or return none[String]()
  parser.parse_identifier()
}
fun parse_symbol(parser: &Parser): Maybe[String] {
  var char = parser.current() or return none[String]()
  char.is_upper() or return none[String]()
  parser.parse_identifier()
}
fun parse_atom(parser: &Parser): Maybe[ToastExpr] {
  parser.consume_whitespace()
  if parser.parse_int() is some(int) then return some(ToastExpr.int(int))
  if parser.parse_string() is some(str) then return some(ToastExpr.string(str))
  if parser.parse_name() is some(name) then return some(ToastExpr.name(name))
  if parser.parse_symbol() is some(symbol) then return some(ToastExpr.symbol(symbol))
  none[ToastExpr]()
}
fun parse_expr(parser: &Parser): Maybe[ToastExpr] {
  var expr = parser.parse_atom() or return none[ToastExpr]()

  var args = list[ToastExpr]()
  loop args.&.push(parser.parse_atom() or break)
  if args.is_not_empty() then
    expr = ToastExpr.call(ToastCall {
      receiver = expr.put_on_heap(), args = args.to_slice()
    })

  parser.consume_whitespace()
  if {parser.input.get_maybe(parser.cursor) or # } == #= then {
    var cursor_at_equals_sign = parser.cursor
    parser.advance()
    if parser.parse_expr() is some(value) then
      expr = ToastExpr.var_(create_var(expr, value))
    else
      parser.cursor = cursor_at_equals_sign
  }

  some(expr)
}
fun parse_type_atom(parser: &Parser): Maybe[ToastType] {
  parser.consume_whitespace()
  if {parser.current() or return none[ToastType]()} == #( then {
    parser.advance()
    var type = parser.parse_type_expr() or panic("expected type expr")
    parser.consume_whitespace()
    {parser.current() or return none[ToastType]()} == #) or panic("expected closing parenthesis")
    parser.advance()
    return some(type)
  }
  if parser.parse_symbol() is some(name) then
    return some(ToastType.call(ToastTypeCall {
      name, args = empty_slice[ToastType]()
    }))
  if parser.parse_name() is some(name) then
    return some(ToastType.variable(name))
  none[ToastType]()
}
fun parse_type_expr(parser: &Parser): Maybe[ToastType] {
  if parser.parse_symbol() is some(name) then {
    var args = list[ToastType]()
    loop args.&.push(parser.parse_type_atom() or break)
    return some(ToastType.call(ToastTypeCall { name, args = args.to_slice() }))
  }
  if parser.parse_type_atom() is some(type) then return some(type)
  none[ToastType]()
}

fun create_var(left: ToastExpr, right: ToastExpr): ToastVar {
  switch left
  case name(name)
    ToastVar { name, value = right.put_on_heap() }
  default panic("variables can only have a name on the left side")
}

fun to_toast_type(bacon: Bacon): ToastType {
  if bacon.line == "|" then {
    var variants = map[String, Slice[ToastType]]()
    for variant in bacon.children do {
      var parser = Parser { input = variant.line, cursor = 0 }
      var name = parser.&.parse_symbol() or panic("expected variant name")
      var args =
        if variant.children.is_empty() then {
          var args = list[ToastType]()
          loop {
            parser.&.consume_whitespace()
            var type = parser.&.parse_type_atom() or break
            args.&.push(type)
          }
          parser.&.consume_whitespace()
          parser.cursor == parser.input.len
            or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}")
          args.to_slice()
        } else {
          parser.&.consume_whitespace()
          parser.cursor == parser.input.len
            or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}")
          variant.children.to_toast_types()
        }
      variants.&.put(name, args)
    }
    ToastType.enum_(variants)
  } else {
    var parser = Parser { input = bacon.line, cursor = 0 }
    if bacon.children.is_empty() then {
      var type = parser.&.parse_type_expr() or panic("expected type expr")
      parser.&.consume_whitespace()
      parser.cursor == parser.input.len
        or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}")
      type
    } else {
      var name = parser.&.parse_symbol() or panic("expected type symbol (coz children)")
      parser.&.consume_whitespace()
      parser.cursor == parser.input.len
        or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}")
      var args = bacon.children.to_toast_types()
      ToastType.call(ToastTypeCall { name, args })
    }
  }
}
fun to_toast_types(bacons: Slice[Bacon]): Slice[ToastType] {
  var types = list[ToastType]()
  for bacon in bacons do types.&.push(bacon.to_toast_type())
  types.to_slice()
}
fun to_toast_type_def(bacon: Bacon): Maybe[ToastDef] {
  var parser = Parser { input = bacon.line, cursor = 0 }
  var name = parser.&.parse_symbol() or return none[ToastDef]()
  var params = list[String]()
  loop {
    parser.&.consume_whitespace()
    params.&.push(parser.&.parse_name() or break)
  }
  parser.current().unwrap("unexpected input end after type signature")
    == #= or panic("expected = after type signature")
  parser.&.advance() | consume the =
  var type =
    if bacon.children.is_empty() then {
      var type = parser.&.parse_type_expr() or panic("expected type expr")
      parser.&.consume_whitespace()
      parser.cursor == parser.input.len
        or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}")
      type
    } else {
      parser.&.consume_whitespace()
      parser.cursor == parser.input.len
        or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}")
      bacon.children.len == 1 or panic("type def, but {bacon.children.len} types given")
      bacon.children.get(0).to_toast_type()
    }
  some(ToastDef {
    name,
    kind = ToastDefKind.type(ToastTypeDef { params = params.to_slice(), type }),
  })
}

fun to_toast_expr(bacon: Bacon): ToastExpr {
  if bacon.line.starts_with("%") then {
    | This is a switch.
    var condition = {
      var parser = Parser { input = bacon.line.without_first(1), cursor = 0 }
      var expr = parser.&.parse_expr() or panic("expected switch condition")
      parser.&.consume_whitespace()
      parser.cursor == parser.input.len
        or panic("additional garbage on switch condition line: {parser.input} cursor = {parser.cursor..parser.input.len}")
      expr
    }
    var cases = list[ToastCase]()
    for case_ in bacon.children do {
      var parser = Parser { input = case_.line, cursor = 0 }
      var symbol = parser.&.parse_symbol() or panic("expected symbol of case")
      var params = list[String]()
      loop {
        parser.&.consume_whitespace()
        params.&.push(parser.&.parse_name() or break)
      }
      parser.current() == some(#:) or panic("expected colon")
      parser.&.advance()
      parser.&.consume_whitespace()
      var body =
        if parser.cursor == parser.input.len then {
          ToastExpr.body(case_.children.to_toast_exprs())
        } else {
          var expr = parser.&.parse_expr() or panic("expected case expression")
          parser.&.consume_whitespace()
          parser.cursor == parser.input.len
            or panic("additional garbage on case line: {parser.input} cursor = {parser.cursor..parser.input.len}")
          case_.children.is_empty()
            or panic("case that is neither single- nor multi-line")
          expr
        }
      cases.&.push(ToastCase { symbol, params = params.to_slice(), body })
    }
    return ToastExpr.switch_(ToastSwitch {
      condition = condition.put_on_heap(), cases = cases.to_slice()
    })
  }
  var parser = Parser { input = bacon.line, cursor = 0 }
  var expr = parser.&.parse_expr() or panic("expected expression")
  var children = bacon.children.to_toast_exprs()
  if {parser.input.get_maybe(parser.cursor) or # } == #= then {
    parser.cursor = parser.cursor + 1
    expr = ToastExpr.var_(create_var(expr, ToastExpr.body(children)))
  } else if children.is_not_empty() then
    expr = ToastExpr.call(ToastCall {
      receiver = expr.put_on_heap(), args = children
    })
  parser.&.consume_whitespace()
  parser.cursor == parser.input.len
    or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}, expr = {expr.debug()}")
  expr
}
fun to_toast_exprs(bacons: Slice[Bacon]): Slice[ToastExpr] {
  var exprs = list[ToastExpr]()
  for bacon in bacons do exprs.&.push(bacon.to_toast_expr())
  exprs.to_slice()
}
fun to_toast_fun_def(bacon: Bacon): Maybe[ToastDef] {
  var parser = Parser { input = bacon.line, cursor = 0 }
  var name = parser.&.parse_name() or return none[ToastDef]()
  var params = list[ToastParam]()
  loop {
    parser.&.consume_whitespace()
    var name = parser.&.parse_name() or break
    parser.current().unwrap("unexpected input end after param name")
      == #: or panic("expected : after param {name}")
    parser.&.advance() | consume the :
    parser.&.consume_whitespace()
    var type = parser.&.parse_type_atom() or panic("expected type of param {name}")
    params.&.push(ToastParam { name, type })
  }
  | consume ->
  parser.&.consume_whitespace()
  parser.current().unwrap("expected -> a") == #- or panic("expected -> found {parser.current()} {parser.cursor}")
  parser.&.advance() | consume the -
  parser.current().unwrap("expected -> c") == #> or panic("expected -> d")
  parser.&.advance() | consume the ->

  parser.&.consume_whitespace()
  var return_type = parser.&.parse_type_atom() or panic("expected return type")

  parser.&.consume_whitespace()
  parser.current().unwrap("expected =") == #= or panic("expected =")
  parser.&.advance() | consume the =

  var body =
    if bacon.children.is_empty() then {
      var body = parser.&.parse_expr() or panic("expected fun body")
      parser.&.consume_whitespace()
      parser.cursor == parser.input.len
        or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}")
      body
    } else {
      var children = bacon.children.to_toast_exprs()
      ToastExpr.body(children)
    }

  some(ToastDef {
    name,
    kind = ToastDefKind.fun_(ToastFun {
      params = params.to_slice(), return_type, body
    })
  })
}

fun to_toast(bacon: Bacon): Toast {
  bacon.line.is_empty() or panic("to_toast was given non-root Bacon")

  var defs = list[ToastDef]()
  for bacon in bacon.children do {
    if bacon.to_toast_type_def() is some(def) then { defs.&.push(def) continue }
    if bacon.to_toast_fun_def()  is some(def) then { defs.&.push(def) continue }

    panic("couldn't parse line: {bacon.line}")

    | var expr = parser.&.parse_expr() or panic("expected expression")
    | var children = bacon.children.to_toasts()
    | if {parser.input.get_maybe(parser.cursor) or # } == #= then {
    |   parser.cursor = parser.cursor + 1
    |   expr = ToastExpr.def(create_var(expr, ToastExpr.body(children)))
    | } else if children.is_not_empty() then
    |   expr = ToastExpr.call(ToastCall {
    |     receiver = expr.put_on_heap(), args = children
    |   })
    | parser.&.consume_whitespace()
    | parser.cursor == parser.input.len
    |   or panic("additional garbage on line: {parser.input} cursor = {parser.cursor..parser.input.len}, expr = {expr.debug()}")
    | expr
  }

  Toast { defs = defs.to_slice() }
}
