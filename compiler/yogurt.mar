| Your Official Graph Using Resolved Types  

import plum.mar

struct Yogurt { funs: Map[YogurtSignature, YogurtFun] }
struct YogurtSignature { str: String }
enum YogurtParam { runtime: PlumType, comptime: YogurtValue }

struct YogurtFun { exprs: Slice[YogurtExpr], body: YogurtBody }
struct YogurtId { int: Int }
struct YogurtBody {
  params: Slice[YogurtId], exprs: Slice[YogurtId], returns: YogurtId
}
struct YogurtExpr { op: YogurtOp, type: PlumType }

struct YogurtValue { type: PlumType, kind: YogurtValueKind }
enum YogurtValueKind {
  int: Int,
  string: String,
  type: PlumType,
  tag: Tuple2[String, Slice[YogurtValue]],
}

enum YogurtOp {
  param,
  uninitialized,
  comptime: YogurtValue,
  switch_: YogurtSwitch,
  tag: YogurtTag,
  call: YogurtCall,
  instruction: YogurtInstruction,
}
struct YogurtSwitch { condition: YogurtId, cases: Map[String, YogurtBody] }
struct YogurtTag { symbol: String, args: Slice[YogurtId] }
struct YogurtCall { receiver: YogurtSignature, args: Slice[YogurtId] }
struct YogurtInstruction { instruction: Instruction, args: Slice[YogurtId] }

fun get(fun_: YogurtFun, id: YogurtId): YogurtExpr { fun_.exprs.get(id.int) }

fun ==(a: YogurtId, b: YogurtId): Bool { a.int == b.int }

fun yogurt_signature(
  name: String, params: Slice[YogurtParam]
): YogurtSignature {
  var b = string_builder().&
  b."{name}"
  for param in params do
    b." {switch param case comptime(val) "{val}:{val.type}" case runtime(type) "{type}"}"
  YogurtSignature { str = b.to_string() }
}
fun ==(a: YogurtSignature, b: YogurtSignature): Bool { a.str == b.str }
fun hash(hasher: &Hasher, sig: YogurtSignature) { hasher.hash(sig.str) }

fun write[W](writer: W, yogurt: Yogurt) {
  var first = true
  for fun_ in yogurt.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, signature: YogurtSignature) { writer."{signature.str}" }
fun write[W](writer: W, id: YogurtId) { writer."@{id.int}" }
fun write[W](writer: W, body: YogurtBody, fun_: YogurtFun, indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.exprs do {
    var expr = fun_.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, fun_, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, param: YogurtParam) {
  switch param
  case runtime(type) writer."{type}"
  case comptime(value) writer."{value}: {value.type}"
}
fun write[W](
  writer: W, op: YogurtOp, fun_: YogurtFun, indentation: Int
) {
  switch op
  case uninitialized writer."uninitialized"
  case comptime(value) writer."comptime {value}"
  case param(param) writer."param {param}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, fun_, indentation + 2)
    }
  }
  case tag(tag) {
    writer."tag {tag.symbol}"
    for arg in tag.args do writer." {arg}"
  }
  case call(call) {
    writer."call \"{call.receiver}\""
    for arg in call.args do writer." {arg}"
  }
  case instruction(instruction) {
    writer."instruction {instruction.instruction}"
    for arg in instruction.args do writer." {arg}"
  }
}
fun write[W](writer: W, value: YogurtValue) {
  switch value.kind
  case int(int) writer."{int}"
  case string(string) writer."{string.debug()}"
  case type(type) writer."{type}"
  case tag(data) {
    writer."{data.a}"
    for arg in data.b do writer." {arg}"
  }
}

| Looking up functions in the Egg  
| Whenever a function is called, we need to choose the correct function based on
| the name and argument types.

struct EggLookupResult { fun_: EggFun, substitutions: Substitutions }
fun lookup(
  egg: Egg, name: String, args: Slice[YogurtParam],
): Result[EggLookupResult, String] {
  var name_matches = list[EggFun]()
  for fun_ in egg.funs do
    if fun_.name.string == name then
      name_matches.&.push(fun_)
  if name_matches.is_empty() then
    return error[EggLookupResult, String]("There is no function named {name.debug()}.")

  var full_matches = list[Tuple2[EggFun, Substitutions]]()
  for fun_ in name_matches do {
    fun_.params.len == args.len or continue
    var constraints = constraints()
    for both in zip(args.iter(), fun_.params.iter()) do
      if both.a is comptime(arg) then
        if arg.type =~= type_type then
          constraints.&.add(both.b.name, arg.kind.type.unwrap())

    var arg_types = list[PlumType]()
    for arg in args do
      arg_types.&.push(switch arg case runtime(ty) ty case comptime(val) val.type)
    var param_types = list[PlumType]()
    for param in fun_.params do param_types.&.push(param.type)
    var substitutions =
      arg_types.to_slice().match_against(param_types.to_slice(), constraints) or
        continue

    full_matches.&.push(tuple(fun_, substitutions))
  }

  if full_matches.is_empty() then
    return error[EggLookupResult, String](
      "There is no matching function named {name} for the args {args}.")
  if full_matches.len > 1 then
    return error[EggLookupResult, String]({
      var b = string_builder().&
      b."multiple functions match {name} {args}:"
      for match in full_matches do
        b."\n  {match.a.name.string} {match.a.params}  (with {match.b.debug()})"
      b.to_string()
    })
  var fun_and_substitutions = full_matches.get(0)

  ok[EggLookupResult, String](EggLookupResult {
    fun_          = fun_and_substitutions.a,
    substitutions = fun_and_substitutions.b,
  })
}

| Convert Egg to Yogurt  

fun $(op: YogurtOp, type: PlumType): _ { YogurtExpr { op, type } }
fun to_expr(value: YogurtValue): _ { YogurtOp.comptime(value) $ value.type }
fun to_expr(param: YogurtParam): YogurtExpr {
  switch param
  case comptime(value) value.to_expr()
  case runtime(type) YogurtOp.param $ type
}

fun yogurt_value_int(int: Int): _ {
  YogurtValue { type = type_int, kind = YogurtValueKind.int(int) }
}
fun yogurt_value_string(string: String): _ {
  YogurtValue { type = type_string, kind = YogurtValueKind.string(string) }
}
fun yogurt_value_type(type: PlumType): _ {
  YogurtValue { type = type_type, kind = YogurtValueKind.type(type) }
}
fun yogurt_value_symbol(symbol: String): _ {
  YogurtValue {
    type = PlumType.enum_(map(symbol -> empty_slice[PlumType]())),
    kind = YogurtValueKind.tag(tuple(symbol, empty_slice[YogurtValue]())),
  }
}

struct YogurtFunBuilder { exprs: List[YogurtExpr] }

fun yogurt_fun_builder(): _ { YogurtFunBuilder { exprs = list[YogurtExpr]() } }
fun push(builder: &YogurtFunBuilder, expr: YogurtExpr): YogurtId {
  var id = YogurtId { int = builder.exprs.len }
  builder.exprs.&.push(expr)
  id
}
fun get(builder: YogurtFunBuilder, id: YogurtId): YogurtExpr {
  builder.exprs.get(id.int)
}

struct YogurtCodeCompiler {
  egg: Egg,
  code: EggCode,
  yogurt: &Yogurt,
  egg_to_yogurt: Map[EggId, YogurtId],
}

fun add_mapping(
  compiler: &YogurtCodeCompiler, egg_id: EggId, yogurt_id: YogurtId
) {
  compiler.egg_to_yogurt.&.put(egg_id, yogurt_id)
}
fun lookup(compiler: YogurtCodeCompiler, egg_id: EggId): YogurtId {
  compiler.egg_to_yogurt.get(egg_id)
}

fun to_yogurt(egg: Egg): Result[Yogurt, Error] {
  var main = egg.lookup("main", list(YogurtParam.runtime(type_int)).to_slice()) or
    return error[Yogurt, Error](error("No main function.", invalid_src()))
  var yogurt = Yogurt { funs = map[YogurtSignature, YogurtFun]() }
  main.fun_.to_yogurt(
    list(YogurtParam.runtime(type_int)).to_slice(),
    main.substitutions,
    "main", egg, yogurt.&
  )?
  ok[Yogurt, Error](yogurt)
}
fun to_yogurt(
  egg_fun: EggFun, params: Slice[YogurtParam], substitutions: Substitutions,
  name: String,
  egg: Egg, yogurt: &Yogurt
): Result[YogurtFun, Error] {
  var signature = yogurt_signature(name, params)
  if yogurt.funs.get_maybe(signature) is some(fun_) then
    return ok[YogurtFun, Error](fun_)
  println("Compiling {signature}")

  | Put a temporary placeholder in the Yogurt. Recursive calls won't analyze the
  | content of that function anyway, they will just calculate the returned type
  | based on the signature.
  yogurt.funs.&.put(signature, YogurtFun {
    exprs = empty_slice[YogurtExpr](),
    body = YogurtBody {
      params = empty_slice[YogurtId](),
      exprs = empty_slice[YogurtId](),
      returns = YogurtId { int = -1 },
    }
  })
  var fun_ =
    switch egg_fun.impl
    case code(code) {
      var builder = yogurt_fun_builder()
      var compiler = YogurtCodeCompiler {
        egg, code, yogurt, egg_to_yogurt = map[EggId, YogurtId]()
      }
      var body = code.body.to_yogurt(params, builder.&, compiler.&)?

      | Check that the return type matches what the function claims it is.
      var param_types = list[PlumType]()
      for param in params do param_types.&.push(
        switch param case comptime(val) val.type case runtime(type) type
      )
      var claimed_return_type = egg_fun.return_type.specialize(substitutions)
      var actual_return_type = builder.get(body.returns).type
      if claimed_return_type != actual_return_type then {
        actual_return_type.is_assignable_to(claimed_return_type) or
          return error[YogurtFun, Error](error(
            "Return types don't match:\n
            'claimed type: {claimed_return_type}\n
            ' actual type: {actual_return_type}",
            egg_fun.name.src
          ))

        var body_with_cast = list[YogurtId]()
        for id in body.exprs do body_with_cast.&.push(id)
        var cast_fun =
          compiler.yogurt.compile_cast_fun(actual_return_type, claimed_return_type)
        var cast = builder.&.push(YogurtOp.call(YogurtCall {
          receiver = cast_fun, args = list(body.returns).to_slice()
        }) $ claimed_return_type)
        body_with_cast.&.push(cast)
        body = YogurtBody {
          params = body.params,
          exprs = body_with_cast.to_slice(),
          returns = cast,
        }
      }

      YogurtFun { exprs = builder.exprs.to_slice(), body }
    }
    case builtin(builtin) builtin.to_yogurt(params, egg, yogurt)?

  println("Done compiling {signature}")

  yogurt.funs.&.put(signature, fun_)
  ok[YogurtFun, Error](fun_)
}

fun to_yogurt(
  body: EggBody, params: Slice[YogurtParam],
  builder: &YogurtFunBuilder, compiler: &YogurtCodeCompiler
): Result[YogurtBody, Error] {
  params.len == body.params.len or
    panic("body params len doesn't match the number of param types")
  var param_ids = list[YogurtId]()
  for i in 0..body.params.len do {
    var egg_id = body.params.get(i)
    var yogurt_id = builder.push(params.get(i).to_expr())
    param_ids.&.push(yogurt_id)
    compiler.add_mapping(egg_id, yogurt_id)
  }
  var exprs = list[YogurtId]()
  for egg_id in body.exprs do {
    var yogurt_id = compiler.code.get(egg_id)
      .to_yogurt(builder, compiler, exprs.&)?
    compiler.add_mapping(egg_id, yogurt_id)
  }
  ok[YogurtBody, Error](YogurtBody {
    params = param_ids.to_slice(),
    exprs = exprs.to_slice(),
    returns = compiler.lookup(body.returns),
  })
}
fun to_yogurt(
  expr: EggExpr, builder: &YogurtFunBuilder, compiler: &YogurtCodeCompiler,
  body: &List[YogurtId],
): Result[YogurtId, Error] {
  var expr =
    switch expr.kind
    case int(int) yogurt_value_int(int).to_expr()
    case string(string) yogurt_value_string(string).to_expr()
    case symbol(symbol) yogurt_value_symbol(symbol).to_expr()
    case param unreachable()
    case switch_(switch_) {
      var condition = compiler.lookup(switch_.condition)
      var condition_expr = builder.get(condition)
      var condition_type = condition_expr.type.extend_one_level()
      var condition_variants = condition_type.enum_
        or return error[YogurtId, Error](error(
          "Switched on non-enum: {condition_type}", expr.src
        ))

      | Make sure all variants are handled, that no extra variants are handled,
      | and that the number of parameters of each case match the variant args.
      for variant in condition_variants do
        switch_.cases.contains(variant.key) or
          return error[YogurtId, Error](error(
            "you switch on {condition_type}, but you don't handle the {variant.key} variant",
            expr.src
          ))
      for case_ in switch_.cases do
        condition_variants.contains(case_.key) or
          return error[YogurtId, Error](error(
            "you switch on {condition_type} and you try to handle the non-existent {case_.key} variant",
            expr.src
          ))
      for case_ in switch_.cases do {
        var variant_args = condition_variants.get(case_.key)
        var case_params = case_.value.params
        variant_args.len == case_params.len or
          return error[YogurtId, Error](error(
            "{case_.key} has {variant_args.len} args, but your case binds {case_params.len}",
            expr.src
          ))
      }

      if false then { | condition_expr.op is comptime(value)
        unreachable()
        | Only compile the corresponding branch.
        | var tag = value.kind.tag.unwrap()
        | var case_ = switch_.cases.get(tag.a)
        | if tag.b.len > 0 then todo("handle comptime switch with variant args")
        | for egg_id in case_.exprs do {
        |   var expr = compiler.code.get(egg_id).to_yogurt(builder, compiler)
        |   var yogurt_id = builder.push(expr)
        |   exprs.&.push(yogurt_id)
        |   compiler.add_mapping(egg_id, yogurt_id)
        | }
      } else {
        | Lower all cases.
        var cases = map[String, YogurtBody]()
        var case_types = list[PlumType]()
        for variant in condition_variants do {
          var case_ = switch_.cases.get(variant.key)
          var params = list[YogurtParam]()
          for arg in variant.value do params.&.push(YogurtParam.runtime(arg))
          var body = case_.to_yogurt(params.to_slice(), builder, compiler)?
          cases.&.put(variant.key, body)
          case_types.&.push(builder.get(body.returns).type)
        }

        | Find the common type of all branches.
        var common_type = join(case_types.to_slice())
          or return error[YogurtId, Error](error("Couldn't join types {case_types}", expr.src))

        | Add cast expressions where necessary.
        for case_ in cases do {
          var case_expr = builder.get(case_.value.returns)
          var case_type = case_expr.type
          if case_type != common_type then {
            eprintln("Insert cast from {case_type} to {common_type}")
            var old_body = case_.value
            var new_exprs = list[YogurtId]()
            for expr in old_body.exprs do new_exprs.&.push(expr)
            var new_returns =
              | TODO: What if we cast (| Foo (| True False)) to
              | (| Foo (| True False Bar))?
              if case_expr.op is comptime(value)
              then builder.push(YogurtValue {
                type = common_type, kind = value.kind
              }.to_expr())
              else {
                var cast_fun =
                  compiler.yogurt.compile_cast_fun(case_type, common_type)
                builder.push(YogurtOp.call(YogurtCall {
                  receiver = cast_fun, args = list(old_body.returns).to_slice()
                }) $ common_type)
              }
            new_exprs.&.push(new_returns)
            cases.&.put(case_.key, YogurtBody {
              params = old_body.params,
              exprs = new_exprs.to_slice(),
              returns = new_returns,
            })
          }
        }

        YogurtOp.switch_(YogurtSwitch { condition, cases }) $ common_type
      }
    }
    case call(call) {
      var name = call.receiver
      var args = list[YogurtId]()
      var arg_params = list[YogurtParam]()
      for arg in call.args do {
        var arg = compiler.lookup(arg)
        var type = builder.get(arg).type
        args.&.push(arg)
        arg_params.&.push(
          if builder.get(arg).op is comptime(value)
          then YogurtParam.comptime(value)
          else YogurtParam.runtime(type)
        )
      }
      var args = args.to_slice()
      var arg_params = arg_params.to_slice()

      var result = compiler.egg.lookup(name.string, arg_params) or(error)
        return error[YogurtId, Error](error(error, name.src))

      var compiled_fun = result.fun_.to_yogurt(
        arg_params, result.substitutions, name.string,
        compiler.egg, compiler.yogurt
      )?
      var return_type = result.fun_.return_type.specialize(result.substitutions)

      var are_all_args_comptime = true
      for arg in arg_params do
        if arg is runtime then are_all_args_comptime = false
      if are_all_args_comptime then {
        body.push(builder.push(YogurtOp.call(YogurtCall {
          receiver = yogurt_signature(name.string, arg_params), args
        }) $ return_type))
        if compiled_fun.body.returns.int == -1 then {
          return error[YogurtId, Error](error(
            "A function with only comptime known arguments calls itself with those same arguments. 
            'We can't run this at comptime.",
            expr.src,
          ))
        }
        var returned_expr = compiled_fun.get(compiled_fun.body.returns)
        var value = returned_expr.op.comptime.unwrap()
        YogurtOp.comptime(value) $ return_type
      } else {
        YogurtOp.call(YogurtCall {
          receiver = yogurt_signature(name.string, arg_params), args
        }) $ return_type
      }
    }
    case tag(tag) {
      var symbol = tag.symbol

      var args = list[YogurtId]()
      var arg_types = list[PlumType]()
      for arg in tag.args do {
        var arg = compiler.lookup(arg)
        var type = builder.get(arg).type
        args.&.push(arg)
        arg_types.&.push(type)
      }
      var args = args.to_slice()
      var arg_types = arg_types.to_slice()

      YogurtOp.tag(YogurtTag { symbol, args })
        $ PlumType.enum_(map(symbol -> arg_types))
    }
  var id = builder.push(expr)
  body.push(id)
  ok[YogurtId, Error](id)
}

struct YogurtBodyBuilder { parent: &YogurtFunBuilder, body: List[YogurtId] }
fun push(body: &YogurtBodyBuilder, expr: YogurtExpr): YogurtId {
  var id = body.parent.&.push(expr)
  body.body.&.push(id)
  id
}
fun get(body: YogurtBodyBuilder, id: YogurtId): YogurtExpr {
  body.parent.get(id)
}
fun to_yogurt(
  builtin: Builtin, arg_types: Slice[YogurtParam], egg: Egg, yogurt: &Yogurt
): Result[YogurtFun, Error] {
  var signature = yogurt_signature("builtin_{builtin}", arg_types)

  var fun_builder = yogurt_fun_builder()
  var body = YogurtBodyBuilder {
    parent = fun_builder.&, body = list[YogurtId]()
  }
  var params = list[YogurtId]()
  for i in 0..arg_types.len do
    params.&.push(body.parent.&.push(arg_types.get(i).to_expr()))
  var params = params.to_slice()
  var returns = builtin.to_yogurt(body.&, params) or(error)
    return error[YogurtFun, Error](error(error, invalid_src()))
  var fun_ = YogurtFun {
    exprs = fun_builder.exprs.to_slice(),
    body = YogurtBody { params, exprs = body.body.to_slice(), returns }
  }

  yogurt.funs.&.put(signature, fun_)
  ok[YogurtFun, Error](fun_)
}
fun to_yogurt(
  builtin: Builtin, builder: &YogurtBodyBuilder, params: Slice[YogurtId]
): Result[YogurtId, String] {
  ok[YogurtId, String](
    switch builtin
    case add_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            a.kind.int.unwrap() + b.kind.int.unwrap()
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.add_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case sub_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            a.kind.int.unwrap() - b.kind.int.unwrap()
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.sub_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case mul_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            a.kind.int.unwrap() * b.kind.int.unwrap()
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.mul_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case div_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            a.kind.int.unwrap() / b.kind.int.unwrap()
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.div_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case mod_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            a.kind.int.unwrap() % b.kind.int.unwrap()
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.mod_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case and_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            a.kind.int.unwrap() & b.kind.int.unwrap()
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.and_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case or_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            or(a.kind.int.unwrap(), b.kind.int.unwrap())
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.or_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case xor_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_int(
            a.kind.int.unwrap() ^ b.kind.int.unwrap()
          ).to_expr()))
      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.xor_ints, args = list(a, b).to_slice()
      }) $ type_int)
    }
    case compare_ints {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then {
          var symbol =
            switch a.kind.int.unwrap() <=> b.kind.int.unwrap()
            case less "Less"
            case equal "Equal"
            case greater "Greater"
          return ok[YogurtId, String](builder.&.push(
            YogurtOp.comptime(yogurt_value_symbol(symbol)) $ type_ordering
          ))
        }
      builder.&.push(
        YogurtOp.instruction(YogurtInstruction {
          instruction = Instruction.compare_ints, args = list(a, b).to_slice()
        }) $ type_ordering
      )
    }
    case concat_strings {
      var a = params.get(0)
      var b = params.get(1)
      if builder.get(a).op is comptime(a) then
        if builder.get(b).op is comptime(b) then
          return ok[YogurtId, String](builder.&.push(yogurt_value_string(
            "{a.kind.string.unwrap()}{b.kind.string.unwrap()}"
          ).to_expr()))

      builder.&.push(YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.concat_strings, args = list(a, b).to_slice()
      }) $ type_string)
    }
    case crash {
      var message = params.get(0)
      builder.&.push(
        YogurtOp.instruction(YogurtInstruction {
          instruction = Instruction.crash, args = list(message).to_slice()
        }) $ PlumType.never
      )
    }
    case type_of {
      var value = builder.get(params.get(0))
      return ok[YogurtId, String](builder.&.push(
        yogurt_value_type(value.type).to_expr()
      ))
    }
    case type_info {
      var type = builder.get(params.get(0)).op.comptime or
        return error[YogurtId, String]("type_info called on Type that's not comptime")
      var symbol =
        switch type.kind.type.unwrap()
        case primitive(name) "{name}"
        case never "Never"
        case enum_ "Enum"
        case recursive unreachable()
      builder.&.push(YogurtOp.comptime(yogurt_value_symbol(symbol))
        $ type_type_info)
    }
  )
}

fun compile_cast_fun(
  yogurt: &Yogurt, from: PlumType, to: PlumType
): YogurtSignature {
  var signature = yogurt_signature("_cast {from} to {to}", empty_slice[YogurtParam]())
  if yogurt.funs.contains(signature) then return signature

  | Put a temporary placeholder in the Yogurt. Recursive calls won't analyze the
  | content of that function anyway, they will just calculate the returned type
  | based on the signature.
  yogurt.funs.&.put(signature, YogurtFun {
    exprs = empty_slice[YogurtExpr](),
    body = YogurtBody {
      params = empty_slice[YogurtId](),
      exprs = empty_slice[YogurtId](),
      returns = YogurtId { int = -1 },
    }
  })

  var fun_builder = yogurt_fun_builder()
  var body = YogurtBodyBuilder {
    parent = fun_builder.&, body = list[YogurtId]()
  }
  var param = body.parent.&.push(YogurtParam.runtime(from).to_expr())
  var params = list(param).to_slice()
  var returns = yogurt.compile_cast_fun_body(from, to, body.&, param)
  var fun_ = YogurtFun {
    exprs = fun_builder.exprs.to_slice(),
    body = YogurtBody { params, exprs = body.body.to_slice(), returns }
  }

  yogurt.funs.&.put(signature, fun_)
  signature
}
fun compile_cast_fun_body(
  yogurt: &Yogurt, from: PlumType, to: PlumType,
  builder: &YogurtBodyBuilder, param: YogurtId,
): YogurtId {
  if from is never then
    return builder.push(YogurtOp.uninitialized $ to)
  if from == to then
    return param | The cast fun is just the identity fun.

  switch to.extend_one_level()
  case enum_(to_variants) {
    var cases = map[String, YogurtBody]()
    for entry in from.extend_one_level().enum_.unwrap() do {
      var variant = entry.key
      var from_args = entry.value
      var to_args = to_variants.get(variant)

      var case_builder = YogurtBodyBuilder {
        parent = builder.parent, body = list[YogurtId]()
      }
      var params = list[YogurtParam]()
      for arg in from_args do params.&.push(YogurtParam.runtime(arg))

      var from_args_ids = list[YogurtId]()
      for i in 0..params.len do {
        var yogurt_id = builder.parent.push(params.get(i).to_expr())
        from_args_ids.&.push(yogurt_id)
      }
      var to_args_ids = list[YogurtId]()
      for both in zip(zip(from_args.iter(), to_args.iter()), from_args_ids.iter()) do {
        var from_arg_type = both.a.a
        var to_arg_type = both.a.b
        var from_arg_id = both.b

        to_args_ids.&.push(case_builder.&.push(YogurtOp.call(YogurtCall {
          receiver = yogurt.compile_cast_fun(from_arg_type, to_arg_type),
          args = list(from_arg_id).to_slice(),
        }) $ to_arg_type))
      }

      var cast = case_builder.&.push(YogurtOp.tag(YogurtTag {
        symbol = variant, args = to_args_ids.to_slice()
      }) $ to)

      var body = YogurtBody {
        params = from_args_ids.to_slice(),
        exprs = case_builder.body.to_slice(),
        returns = cast,
      }

      cases.&.put(variant, body)
    }
    builder.push(YogurtOp.switch_(YogurtSwitch { condition = param, cases }) $ to)
  }
  default panic("casting {from} to {to} is not supported")
}
