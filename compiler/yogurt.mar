| Your Official Graph Using Resolved Types  

import breakfast.mar

struct Yogurt { funs: Map[YogurtSignature, YogurtFun] }
struct YogurtSignature { str: String }
enum YogurtParam { runtime: YogurtType, comptime: YogurtValue }

struct YogurtFun { exprs: Slice[YogurtExpr], body: YogurtBody }
struct YogurtId { int: Int }
struct YogurtBody {
  params: Slice[YogurtId], exprs: Slice[YogurtId], returns: YogurtId
}
struct YogurtExpr { op: YogurtOp, type: YogurtType }

enum YogurtType {
  int,
  string,
  type,
  never,
  enum_: Map[String, Slice[YogurtType]],
  recursive: Int,
}

struct YogurtValue { type: YogurtType, kind: YogurtValueKind }
enum YogurtValueKind {
  int: Int,
  string: String,
  type: YogurtType,
  tag: Tuple2[String, Slice[YogurtValue]],
}

enum YogurtOp {
  param,
  comptime: YogurtValue,
  switch_: YogurtSwitch,
  tag: YogurtTag,
  call: YogurtCall,
  cast: YogurtId,
  instruction: YogurtInstruction,
}
struct YogurtSwitch { condition: YogurtId, cases: Map[String, YogurtBody] }
struct YogurtTag { symbol: String, args: Slice[YogurtId] }
struct YogurtCall { receiver: YogurtSignature, args: Slice[YogurtId] }
struct YogurtInstruction { instruction: Instruction, args: Slice[YogurtId] }

fun ==(a: YogurtType, b: YogurtType): Bool {
  switch a
  case int(a)       if b is int(b)       then a == b else false
  case string(a)    if b is string(b)    then a == b else false
  case type(a)      if b is type(b)      then a == b else false
  case never(a)     if b is never(b)     then a == b else false
  case enum_(a)     if b is enum_(b)     then a == b else false
  case recursive(a) if b is recursive(b) then a == b else false
}
fun hash(hasher: &Hasher, type: YogurtType) {
  switch type
  case int       { hasher.hash(0) }
  case string    { hasher.hash(1) }
  case type      { hasher.hash(2) }
  case never     { hasher.hash(3) }
  case enum_     { hasher.hash(4) }
  case recursive { hasher.hash(5) }
}

fun get(fun_: YogurtFun, id: YogurtId): YogurtExpr { fun_.exprs.get(id.int) }

fun yogurt_signature(
  name: String, params: Slice[YogurtParam]
): YogurtSignature {
  var b = string_builder().&
  b."{name}"
  for param in params do
    b." {switch param case comptime(val) "{val}" case runtime(type) "{type}"}"
  YogurtSignature { str = b.to_string() }
}
fun ==(a: YogurtSignature, b: YogurtSignature): Bool { a.str == b.str }
fun hash(hasher: &Hasher, sig: YogurtSignature) { hasher.hash(sig.str) }

fun write[W](writer: W, yogurt: Yogurt) {
  var first = true
  for fun_ in yogurt.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, signature: YogurtSignature) { writer."{signature.str}" }
fun write[W](writer: W, id: YogurtId) { writer."@{id.int}" }
fun write[W](writer: W, body: YogurtBody, fun_: YogurtFun, indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.exprs do {
    var expr = fun_.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, fun_, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](
  writer: W, op: YogurtOp, fun_: YogurtFun, indentation: Int
) {
  switch op
  case comptime(value) writer."comptime {value}"
  case param(param) writer."param {param}"
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, fun_, indentation + 2)
    }
  }
  case tag(tag) {
    writer."tag {tag.symbol}"
    for arg in tag.args do writer." {arg}"
  }
  case call(call) {
    writer."call \"{call.receiver}\""
    for arg in call.args do writer." {arg}"
  }
  case cast(id) writer."cast {id}"
  case instruction(instruction) {
    writer."instruction {instruction.instruction}"
    for arg in instruction.args do writer." {arg}"
  }
}
fun write[W](writer: W, type: YogurtType) {
  switch type
  case int writer."Int"
  case string writer."String"
  case type writer."Type"
  case never writer."Never"
  case enum_(variants) {
    var first = true
    for variant in variants do {
      if first then first = false else writer." | "
      writer."{variant.key}"
      for arg in variant.value do writer." {arg}"
    }
  }
  case recursive(level) writer."^{level}"
}
fun write[W](writer: W, value: YogurtValue) {
  switch value.kind
  case int(int) writer."{int}"
  case string(string) writer."{string.debug()}"
  case type(type) writer."{type}"
  case tag(data) {
    writer."{data.a}"
    for arg in data.b do writer." {arg}"
  }
}

| Looking up functions in the Egg  
| Whenever a function is called, we need to choose the correct function based on
| the name and argument types.

struct EggLookupResult { fun_: EggFun, env: Map[String, YogurtType] }
fun lookup(egg: Egg, name: String, args: Slice[YogurtType]): EggLookupResult {
  var name_matches = list[EggFun]()
  for fun_ in egg.funs do
    if fun_.name == name then
      name_matches.&.push(fun_)
  if name_matches.is_empty() then panic("there is no function named {name}")

  var full_matches = list[Tuple2[EggFun, Map[String, YogurtType]]]()
  for fun_ in name_matches do {
    fun_.params.len == args.len or continue

    var env = map[String, YogurtType]()
    var works = true
    for both in zip(args.iter(), fun_.params.iter()) do {
      var arg_env = both.a.is_assignable_to(both.b) or
        { works = false break }
      for entry in arg_env do
        if env.get_maybe(entry.key) is some(type)
        then {
          type == entry.value or { works = false break }
          {}
        }
        else env.&.put(entry.key, entry.value)
    }
    if not(works) then continue

    full_matches.&.push(tuple(fun_, env))
  }

  if full_matches.is_empty() then
    panic("there is no matching function named {name} for the args {args}")
  if full_matches.len > 1 then
    panic("multiple functions match {name} {args}")
  var fun_and_env = full_matches.get(0)

  EggLookupResult { fun_ = fun_and_env.a, env = fun_and_env.b }
}

fun specialize(type: EggType, env: Map[String, YogurtType]): YogurtType {
  switch type
  case variable(variable)
    env.get_maybe(variable) or
      panic("generic type {variable} not in type env {env}")
  case int YogurtType.int
  case string YogurtType.string
  case type YogurtType.type
  case never YogurtType.never
  case enum_(enum_) {
    var variants = map[String, Slice[YogurtType]]()
    for variant in enum_ do {
      var args = list[YogurtType]()
      for arg in variant.value do args.&.push(arg.specialize(env))
      variants.&.put(variant.key, args.to_slice())
    }
    YogurtType.enum_(variants)
  }
  case recursive(level) YogurtType.recursive(level)
}

| Checks if the concrete YogurtType is assignable to the EggType, possibly
| containing type variables. Returns a map of what values the type variables
| need to have for the mapping to succeed.
|
| Int            -> Int           ? {}
| Int            -> String        ? -
| Int            -> t             ? {t: Int}
| List Int       -> List t        ? {t: Int}
| Map Int String -> Map t t       ? -
| Never          -> Int           ? {}  (doesn't work like this yet)
| Never          -> List t        ? {}  (doesn't work like this yet)
| Never          -> Never         ? {}
| | Foo Bar      -> | Foo Bar Baz ? {}
fun is_assignable_to(
  yogurt: YogurtType, egg: EggType
): Maybe[Map[String, YogurtType]] {
  switch egg
  case variable(v) some(map(v -> yogurt))
  case int
    if yogurt is int
    then some(map[String, YogurtType]())
    else none[Map[String, YogurtType]]()
  case string
    if yogurt is string
    then some(map[String, YogurtType]())
    else none[Map[String, YogurtType]]()
  case type
    if yogurt is type
    then some(map[String, YogurtType]())
    else none[Map[String, YogurtType]]()
  case never
    if yogurt is never
    then some(map[String, YogurtType]())
    else none[Map[String, YogurtType]]()
  case enum_(egg_variants) {
    var yogurt_variants = yogurt.enum_ or return none[Map[String, YogurtType]]()
    var mapping = map[String, YogurtType]()

    for variant in yogurt_variants do {
      var yogurt_args = variant.value
      var egg_args = egg_variants.get_maybe(variant.key) or
        return none[Map[String, YogurtType]]()
      yogurt_args.len == egg_args.len or return none[Map[String, YogurtType]]()
  
      for both in zip(yogurt_args.iter(), egg_args.iter()) do {
        var arg_mapping = both.a.is_assignable_to(both.b) or
          return none[Map[String, YogurtType]]()
        for entry in arg_mapping do
          if mapping.get_maybe(entry.key) is some(type)
          then {
            type == entry.value or return none[Map[String, YogurtType]]()
            {}
          }
          else mapping.&.put(entry.key, entry.value)
      }
    }

    some(mapping)
  }
  case recursive todo()
}

| Convert Egg to Yogurt  

fun $(op: YogurtOp, type: YogurtType): _ { YogurtExpr { op, type } }
fun to_expr(value: YogurtValue): _ { YogurtOp.comptime(value) $ value.type }
fun to_expr(param: YogurtParam): YogurtExpr {
  switch param
  case comptime(value) value.to_expr()
  case runtime(type) YogurtOp.param $ type
}

var yogurt_type_ordering = YogurtType.enum_(map(
  "Less"    -> empty_slice[YogurtType](),
  "Equal"   -> empty_slice[YogurtType](),
  "Greater" -> empty_slice[YogurtType](),
))
fun yogurt_value_int(int: Int): _ {
  YogurtValue { type = YogurtType.int, kind = YogurtValueKind.int(int) }
}
fun yogurt_value_string(string: String): _ {
  YogurtValue { type = YogurtType.string, kind = YogurtValueKind.string(string) }
}
fun yogurt_value_type(type: YogurtType): _ {
  YogurtValue { type = YogurtType.type, kind = YogurtValueKind.type(type) }
}
fun yogurt_value_symbol(symbol: String): _ {
  YogurtValue {
    type = YogurtType.enum_(map(symbol -> empty_slice[YogurtType]())),
    kind = YogurtValueKind.tag(tuple(symbol, empty_slice[YogurtValue]())),
  }
}

struct YogurtFunBuilder { exprs: List[YogurtExpr] }

fun yogurt_fun_builder(): _ { YogurtFunBuilder { exprs = list[YogurtExpr]() } }
fun push(builder: &YogurtFunBuilder, expr: YogurtExpr): YogurtId {
  var id = YogurtId { int = builder.exprs.len }
  builder.exprs.&.push(expr)
  id
}
fun get(builder: YogurtFunBuilder, id: YogurtId): YogurtExpr {
  builder.exprs.get(id.int)
}

struct YogurtCodeCompiler {
  egg: Egg,
  code: EggCode,
  yogurt: &Yogurt,
  egg_to_yogurt: Map[EggId, YogurtId],
}

fun add_mapping(
  compiler: &YogurtCodeCompiler, egg_id: EggId, yogurt_id: YogurtId
) {
  compiler.egg_to_yogurt.&.put(egg_id, yogurt_id)
}
fun lookup(compiler: YogurtCodeCompiler, egg_id: EggId): YogurtId {
  compiler.egg_to_yogurt.get(egg_id)
}

fun to_yogurt(egg: Egg): Yogurt {
  var main = egg.lookup("main", list(YogurtType.int).to_slice())
  var yogurt = Yogurt { funs = map[YogurtSignature, YogurtFun]() }
  main.fun_.to_yogurt(
    list(YogurtParam.runtime(YogurtType.int)).to_slice(),
    "main", egg, yogurt.&
  )
  yogurt
}
fun to_yogurt(
  fun_: EggFun, params: Slice[YogurtParam], name: String,
  egg: Egg, yogurt: &Yogurt
): YogurtFun {
  var signature = yogurt_signature(name, params)
  if yogurt.funs.get_maybe(signature) is some(fun_) then return fun_

  | Put a temporary placeholder in the Yogurt. Recursive calls won't analyze the
  | content of that function anyway, they will just calculate the returned type
  | based on the signature.
  yogurt.funs.&.put(signature, YogurtFun {
    exprs = empty_slice[YogurtExpr](),
    body = YogurtBody {
      params = empty_slice[YogurtId](),
      exprs = empty_slice[YogurtId](),
      returns = YogurtId { int = -1 },
    }
  })
  var fun_ =
    switch fun_.impl
    case code(code) {
      var builder = yogurt_fun_builder()
      var compiler = YogurtCodeCompiler {
        egg, code, yogurt, egg_to_yogurt = map[EggId, YogurtId]()
      }
      var body = code.body.to_yogurt(params, builder.&, compiler.&)
      YogurtFun { exprs = builder.exprs.to_slice(), body }
    }
    case builtin(builtin) builtin.to_yogurt(params, egg, yogurt)

  yogurt.funs.&.put(signature, fun_)
  fun_
}

fun to_yogurt(
  body: EggBody, params: Slice[YogurtParam],
  builder: &YogurtFunBuilder, compiler: &YogurtCodeCompiler
): YogurtBody {
  params.len == body.params.len or
    panic("body params len doesn't matche number of param types")
  var param_ids = list[YogurtId]()
  for i in 0..body.params.len do {
    var egg_id = body.params.get(i)
    var yogurt_id = builder.push(params.get(i).to_expr())
    param_ids.&.push(yogurt_id)
    compiler.add_mapping(egg_id, yogurt_id)
  }
  var exprs = list[YogurtId]()
  for egg_id in body.exprs do {
    var expr = compiler.code.get(egg_id).to_yogurt(builder, compiler)
    var yogurt_id = builder.push(expr)
    exprs.&.push(yogurt_id)
    compiler.add_mapping(egg_id, yogurt_id)
  }
  YogurtBody {
    params = param_ids.to_slice(),
    exprs = exprs.to_slice(),
    returns = compiler.lookup(body.returns),
  }
}
fun to_yogurt(
  expr: EggExpr, builder: &YogurtFunBuilder, compiler: &YogurtCodeCompiler
): YogurtExpr {
  switch expr
  case int(int) yogurt_value_int(int).to_expr()
  case string(string) yogurt_value_string(string).to_expr()
  case symbol(symbol) yogurt_value_symbol(symbol).to_expr()
  case param unreachable()
  case switch_(switch_) {
    var condition = compiler.lookup(switch_.condition)
    var condition_expr = builder.get(condition)
    var condition_type = condition_expr.type
    var condition_variants = condition_type.enum_
      or panic("switched on non-enum: {condition_type}")

    | Make sure all variants are handled, that no extra variants are handled,
    | and that the number of parameters of each case match the variant args.
    for variant in condition_variants do
      switch_.cases.contains(variant.key) or
        panic("you switch on {condition_type}, but you don't handle the {variant.key} variant")
    for case_ in switch_.cases do
      condition_variants.contains(case_.key) or
        panic("you switch on {condition_type} and you try to handle the non-existent {case_.key} variant")
    for case_ in switch_.cases do {
      var variant_args = condition_variants.get(case_.key)
      var case_params = case_.value.params
      variant_args.len == case_params.len or
        panic("{case_.key} has {variant_args.len} args, but your case binds {case_params.len}")
    }

    if false then { | condition_expr.op is comptime(value)
      unreachable()
      | Only compile the corresponding branch.
      | var tag = value.kind.tag.unwrap()
      | var case_ = switch_.cases.get(tag.a)
      | if tag.b.len > 0 then todo("handle comptime switch with variant args")
      | for egg_id in case_.exprs do {
      |   var expr = compiler.code.get(egg_id).to_yogurt(builder, compiler)
      |   var yogurt_id = builder.push(expr)
      |   exprs.&.push(yogurt_id)
      |   compiler.add_mapping(egg_id, yogurt_id)
      | }
    } else {
      | Lower all cases.
      var cases = map[String, YogurtBody]()
      var case_types = list[YogurtType]()
      for variant in condition_variants do {
        var case_ = switch_.cases.get(variant.key)
        var params = list[YogurtParam]()
        for arg in variant.value do params.&.push(YogurtParam.runtime(arg))
        var body = case_.to_yogurt(params.to_slice(), builder, compiler)
        cases.&.put(variant.key, body)
        case_types.&.push(builder.get(body.returns).type)
      }

      | Find the common type of all branches.
      var common_type = join(case_types.to_slice())
        or panic("Couldn't join types {case_types}")

      | Add cast expressions where necessary.
      for case_ in cases do {
        var case_expr = builder.get(case_.value.returns)
        var case_type = case_expr.type
        if case_type != common_type then {
          eprintln("Insert cast from {case_type} to {common_type}")
          var old_body = case_.value
          var new_exprs = list[YogurtId]()
          for expr in old_body.exprs do new_exprs.&.push(expr)
          var new_returns =
            | TODO: What if we cast (| Foo (| True False)) to
            | (| Foo (| True False Bar))?
            if case_expr.op is comptime(value)
            then builder.push(YogurtValue {
              type = common_type, kind = value.kind
            }.to_expr())
            else builder.push(YogurtOp.cast(old_body.returns) $ common_type)
          new_exprs.&.push(new_returns)
          cases.&.put(case_.key, YogurtBody {
            params = old_body.params,
            exprs = new_exprs.to_slice(),
            returns = new_returns,
          })
        }
      }

      YogurtOp.switch_(YogurtSwitch { condition, cases }) $ common_type
    }
  }
  case call(call) {
    var name = call.receiver
    var args = list[YogurtId]()
    var arg_types = list[YogurtType]()
    var arg_params = list[YogurtParam]()
    for arg in call.args do {
      var arg = compiler.lookup(arg)
      var type = builder.get(arg).type
      args.&.push(arg)
      arg_types.&.push(type)
      arg_params.&.push(
        if builder.get(arg).op is comptime(value)
        then YogurtParam.comptime(value)
        else YogurtParam.runtime(type)
      )
    }
    var args = args.to_slice()
    var arg_types = arg_types.to_slice()
    var arg_params = arg_params.to_slice()

    var result = compiler.egg.lookup(name, arg_types)

    result.fun_.to_yogurt(arg_params, name, compiler.egg, compiler.yogurt)
    var return_type = result.fun_.return_type.specialize(result.env)

    YogurtOp.call(YogurtCall {
      receiver = yogurt_signature(name, arg_params), args
    }) $ return_type
  }
  case tag(tag) {
    var symbol = tag.symbol
    
    var args = list[YogurtId]()
    var arg_types = list[YogurtType]()
    for arg in tag.args do {
      var arg = compiler.lookup(arg)
      var type = builder.get(arg).type
      args.&.push(arg)
      arg_types.&.push(type)
    }
    var args = args.to_slice()
    var arg_types = arg_types.to_slice()

    YogurtOp.tag(YogurtTag { symbol, args })
      $ YogurtType.enum_(map(symbol -> arg_types))
  }
}

struct YogurtBodyBuilder { parent: &YogurtFunBuilder, body: List[YogurtId] }
fun push(body: &YogurtBodyBuilder, expr: YogurtExpr): YogurtId {
  var id = body.parent.&.push(expr)
  body.body.&.push(id)
  id
}
fun get(body: YogurtBodyBuilder, id: YogurtId): YogurtExpr {
  body.parent.get(id)
}
fun to_yogurt(
  builtin: Builtin, arg_types: Slice[YogurtParam], egg: Egg, yogurt: &Yogurt
): YogurtFun {
  var signature = yogurt_signature("builtin_{builtin}", arg_types)

  var fun_builder = yogurt_fun_builder()
  var body = YogurtBodyBuilder {
    parent = fun_builder.&, body = list[YogurtId]()
  }
  var params = list[YogurtId]()
  for i in 0..arg_types.len do
    params.&.push(body.parent.&.push(arg_types.get(i).to_expr()))
  var params = params.to_slice()
  var returns = builtin.to_yogurt(body.&, params)
  var fun_ = YogurtFun {
    exprs = fun_builder.exprs.to_slice(),
    body = YogurtBody { params, exprs = body.body.to_slice(), returns }
  }

  yogurt.funs.&.put(signature, fun_)
  fun_
}
fun to_yogurt(
  builtin: Builtin, builder: &YogurtBodyBuilder, params: Slice[YogurtId]
): YogurtId {
  switch builtin
  case add {
    var a = params.get(0)
    var b = params.get(1)
    if builder.get(a).op is comptime(a) then
      if builder.get(b).op is comptime(b) then
        return builder.&.push(yogurt_value_int(
          a.kind.int.unwrap() + b.kind.int.unwrap()
        ).to_expr())
    builder.&.push(YogurtOp.instruction(YogurtInstruction {
      instruction = Instruction.add, args = list(a, b).to_slice()
    }) $ YogurtType.int)
  }
  case sub {
    var a = params.get(0)
    var b = params.get(1)
    if builder.get(a).op is comptime(a) then
      if builder.get(b).op is comptime(b) then
        return builder.&.push(yogurt_value_int(
          a.kind.int.unwrap() - b.kind.int.unwrap()
        ).to_expr())
    builder.&.push(YogurtOp.instruction(YogurtInstruction {
      instruction = Instruction.sub, args = list(a, b).to_slice()
    }) $ YogurtType.int)
  }
  case compare {
    var a = params.get(0)
    var b = params.get(1)
    if builder.get(a).op is comptime(a) then
      if builder.get(b).op is comptime(b) then {
        var symbol =
          switch a.kind.int.unwrap() <=> b.kind.int.unwrap()
          case less "Less"
          case equal "Equal"
          case greater "Greater"
        return builder.&.push(yogurt_value_symbol(symbol).to_expr())
      }
    builder.&.push(
      YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.compare, args = list(a, b).to_slice()
      }) $ yogurt_type_ordering
    )
  }
  case concat {
    var a = params.get(0)
    var b = params.get(1)
    if builder.get(a).op is comptime(a) then
      if builder.get(b).op is comptime(b) then
        return builder.&.push(yogurt_value_string(
          "{a.kind.string.unwrap()}{b.kind.string.unwrap()}"
        ).to_expr())

    builder.&.push(YogurtOp.instruction(YogurtInstruction {
      instruction = Instruction.concat, args = list(a, b).to_slice()
    }) $ YogurtType.string)
  }
  case type_info {
    var type = builder.get(params.get(0)).op.comptime or
      panic("type_info called on Type that's not comptime")
    var symbol =
      switch type.kind.type.unwrap()
      case int "Int"
      case string "String"
      case type "Type"
      case never "Never"
      case enum_ "Enum"
      case recursive unreachable()
    builder.&.push(yogurt_value_symbol(symbol).to_expr())
  }
  case crash {
    var message = params.get(0)
    builder.&.push(
      YogurtOp.instruction(YogurtInstruction {
        instruction = Instruction.crash, args = list(message).to_slice()
      }) $ YogurtType.never
    )
  }
  default todo("implement builtin {builtin}")
}

fun join(types: Slice[YogurtType]): Maybe[YogurtType] {
  var common = types.get(0)
  for type in types.without_first() do
    common = join(common, type) or return none[YogurtType]()
  some(common)
}
fun join(a: YogurtType, b: YogurtType): Maybe[YogurtType] {
  if a is never then return some(b)
  if b is never then return some(a)

  switch a
  case int if b is int then some(YogurtType.int) else none[YogurtType]()
  case string if b is string then some(YogurtType.string) else none[YogurtType]()
  case type if b is type then some(YogurtType.type) else none[YogurtType]()
  case never unreachable()
  case enum_(a_variants) {
    switch b
    case enum_(b_variants) {
      var variants = map[String, Slice[YogurtType]]()
      for variant in a_variants do variants.&.put(variant.key, variant.value)
      for variant in b_variants do {
        if variants.get_maybe(variant.key) is some(a_args) then {
          var args = list[YogurtType]()
          for both in zip(a_args.iter(), variant.value.iter()) do
            args.&.push(join(both.a, both.b) or return none[YogurtType]())
          variants.&.put(variant.key, args.to_slice())
        } else
          variants.&.put(variant.key, variant.value)
      }
      some(YogurtType.enum_(variants))
    }
    default none[YogurtType]()
  }
  case recursive(level) todo("join recursive type")
}
