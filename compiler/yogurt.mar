| Your Official Graph Using Resolved Types  

import plum.mar

struct Yogurt { funs: Map[YogurtSignature, YogurtFun] }
struct YogurtSignature { str: String }

struct YogurtFun {
  exprs: Slice[YogurtExpr], captures: Maybe[Slice[YogurtId]], body: YogurtBody
}
struct YogurtId { int: Int }
struct YogurtBody {
  params: Slice[YogurtId], exprs: Slice[YogurtId], returns: YogurtId
}
struct YogurtExpr { op: YogurtOp, type: PlumType }

struct YogurtValue { type: PlumType, kind: YogurtValueKind }
enum YogurtValueKind {
  int: Int,
  string: String,
  struct_: Map[String, YogurtValue],
  variant: YogurtVariantValue,
  lambda: YogurtLambdaValue,
  type: PlumType,
}
struct YogurtVariantValue { symbol: String, payloads: Slice[YogurtValue] }
struct YogurtLambdaValue {
  captures: Slice[YogurtValue], function: YogurtSignature
}

enum YogurtOp {
  param,
  uninitialized,
  comptime: YogurtValue,
  struct_: Map[String, YogurtId],
  member: YogurtMember,
  variant: YogurtVariant,
  switch_: YogurtSwitch,
  lambda: YogurtLambda,
  lambda_call: YogurtLambdaCall,
  call: YogurtCall,
  instruction: YogurtInstruction,
}
struct YogurtMember { of: YogurtId, name: String }
struct YogurtSwitch { condition: YogurtId, cases: Map[String, YogurtBody] }
struct YogurtVariant { symbol: String, payloads: Slice[YogurtId] }
struct YogurtLambda { function: YogurtSignature, captures: Slice[YogurtId] }
struct YogurtLambdaCall { lambda: YogurtId, args: Slice[YogurtId] }
struct YogurtCall { function: YogurtSignature, args: Slice[YogurtId] }
struct YogurtInstruction { instruction: Instruction, args: Slice[YogurtId] }

fun yogurt(): _ { Yogurt { funs = map[YogurtSignature, YogurtFun]() } }

fun $(kind: YogurtValueKind, type: PlumType): _ { YogurtValue { kind, type } }

fun $(op: YogurtOp, type: PlumType): _ { YogurtExpr { op, type } }
fun to_expr(value: YogurtValue): _ { YogurtOp.comptime(value) $ value.type }

fun yogurt_value_int(int: Int): _ { YogurtValueKind.int(int) $ type_int }
fun yogurt_value_string(string: String): YogurtValue {
  YogurtValueKind.string(string) $ type_string
}
fun yogurt_value_struct(fields: Map[String, YogurtValue]): YogurtValue {
  var field_types = map[String, PlumType]()
  for field in fields do field_types.&.put(field.key, field.value.type)
  YogurtValueKind.struct_(fields) $ PlumType.struct_(field_types)
}
fun yogurt_value_struct(
  type: PlumType, fields: Map[String, YogurtValue]
): YogurtValue {
  for field in fields do
    field.value.type == type.struct_.unwrap().get(field.key)
      or panic("field has wrong type")
  YogurtValueKind.struct_(fields) $ type
}
fun yogurt_value_type(type: PlumType): YogurtValue {
  YogurtValueKind.type(type) $ type_type
}
fun yogurt_value_symbol(symbol: String): YogurtValue {
  YogurtValueKind.variant(YogurtVariantValue {
    symbol, payloads = empty_slice[YogurtValue]()
  }) $ PlumType.enum_(map(symbol -> empty_slice[PlumType]()))
}
fun yogurt_value_variant(symbol: String, payloads: Slice[YogurtValue]): YogurtValue {
  var payload_types = list[PlumType]()
  for payload in payloads do payload_types.&.push(payload.type)
  YogurtValueKind.variant(YogurtVariantValue { symbol, payloads })
    $ PlumType.enum_(map(symbol -> payload_types.to_slice()))
}
fun yogurt_value_list(items: Slice[YogurtValue], item_type: PlumType): YogurtValue {
  println("building comptime list of items: {items}")
  YogurtValueKind.variant(
    if items.get_maybe(0) is some(item) then
      YogurtVariantValue {
        symbol = "More",
        payloads = list(
          item,
          yogurt_value_list(items.subslice(1..items.len), item_type)
        ).to_slice()
      }
    else
      YogurtVariantValue { symbol = "Empty", payloads = empty_slice[YogurtValue]() }
  ) $ type_list(item_type)
}

fun get(fun_: YogurtFun, id: YogurtId): YogurtExpr { fun_.exprs.get(id.int) }

fun ==(a: YogurtId, b: YogurtId): Bool { a.int == b.int }
fun hash(hasher: &Hasher, id: YogurtId) { hasher.hash(id.int) }

fun yogurt_signature(name: String, params: Slice[PlumType]): YogurtSignature {
  var b = string_builder().&
  b."{name}"
  for param in params do b." {param}"
  YogurtSignature { str = b.to_string() }
}
fun yogurt_signature(name: String, args: Slice[YogurtValue]): YogurtSignature {
  var b = string_builder().&
  b."{name}"
  for arg in args do b." {arg}"
  YogurtSignature { str = b.to_string() }
}
fun ==(a: YogurtSignature, b: YogurtSignature): Bool { a.str == b.str }
fun hash(hasher: &Hasher, sig: YogurtSignature) { hasher.hash(sig.str) }

fun return_type(fun_: YogurtFun): PlumType { fun_.get(fun_.body.returns).type }

fun write[W](writer: W, yogurt: Yogurt) {
  var first = true
  for fun_ in yogurt.funs do {
    if first then first = false else writer."\n"
    writer."{fun_.key}:"
    if fun_.value.captures is some(captures) then {
      writer." (captures "
      for capture in captures do writer." {capture}"
      writer.")"
    }
    writer.write(fun_.value.body, fun_.value, 1)
  }
}
fun write[W](writer: W, signature: YogurtSignature) { writer."{signature.str}" }
fun write[W](writer: W, id: YogurtId) { writer."@{id.int}" }
fun write[W](writer: W, body: YogurtBody, fun_: YogurtFun, indentation: Int) {
  for param in body.params do writer." {param}"
  writer."\n"
  for id in body.exprs do {
    var expr = fun_.get(id)
    for i in 0..indentation do writer."  "
    writer."{id}: {expr.type} = "
    writer.write(expr.op, fun_, indentation)
    writer."\n"
  }
  for i in 0..indentation do writer."  "
  writer."{body.returns}"
}
fun write[W](writer: W, op: YogurtOp, fun_: YogurtFun, indentation: Int) {
  switch op
  case uninitialized writer."uninitialized"
  case comptime(value) writer."comptime {value}"
  case param(param) writer."param {param}"
  case struct_(struct_) {
    writer."&"
    for field in struct_ do writer." {field.key}: {field.value}"
  }
  case member(member) writer."{member.of}.{member.name}"
  case variant(variant) {
    writer."variant {variant.symbol}"
    for payload in variant.payloads do writer." {payload}"
  }
  case switch_(switch_) {
    writer."switch {switch_.condition}"
    for case_ in switch_.cases do {
      writer."\n"
      for i in 0..indentation do writer."  "
      writer."  {case_.key}:"
      writer.write(case_.value, fun_, indentation + 2)
    }
  }
  case lambda(lambda) {
    writer."lambda [capturing"
    for capture in lambda.captures do writer." {capture}"
    writer."] {lambda.function}"
  }
  case lambda_call(call) {
    writer."call {call.lambda}"
    for arg in call.args do writer." {arg}"
  }
  case call(call) {
    writer."call \"{call.function}\""
    for arg in call.args do writer." {arg}"
  }
  case instruction(instruction) {
    writer."instruction {instruction.instruction}"
    for arg in instruction.args do writer." {arg}"
  }
}
fun write[W](writer: W, value: YogurtValue) {
  switch value.kind
  case int(int) writer."{int}"
  case string(string) writer."{string.debug()}"
  case struct_(struct_) {
    writer."(&"
    for field in struct_ do writer." {field.key}: {field.value}"
    writer.")"
  }
  case variant(variant) {
    writer."({variant.symbol}"
    for payload in variant.payloads do writer." {payload}"
    writer.")"
  }
  case lambda(lambda) {
    writer."\\ [capturing"
    for captured in lambda.captures do writer." {captured}"
    writer."] {lambda.function}"
  }
  case type(type) writer."{type}"
}
