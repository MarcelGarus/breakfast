
foo = 4

not a =
  switch a
    True: False
    False: True

format [T] value: T -> Str =
  % typeInfo T
    Int: ...
    Struct fields:
      ...


is_inty type =
  info = type_info type
  % info
    ComptimeInt _: True
    Int: True
    _: False

is_stringy type =
  info = type_info type
  % info
    ComptimeString _: True
    String: True
    _: False

+ a: Int b: Int = std.builtins.add a b
+ a: String b: String = std.builtins.concat a b

TypeInfo = [Int, String, Enum (Map String Type), Struct (Map String Type)]

compare a b = builtin_compare a b
type_info [T] type: T -> TypeInfo = builtin_type_info type
crash message = builtin_crash message

is_less a b =
  % compare a b
    Less: True
    Equal: False
    Greater: False

add a b =
  Tuple
    1
    2
    3

+ a b =
  % type_info a
    ComptimeInt: builtin_add a b
    Int: builtin_add a b
    ComptimeString: builtin_concat a b
    String: builtin_concat a b
    Enum: crash "Tried to add weird types together."

format value =
  % type_info value
    ComptimeInt: "<a comptime int>"
    Int: "<an int>"
    ComptimeString: value
    String: value
    Enum: "<other>"

main a =
  % Bar 3
    Foo a:
      blub = 5
      "it's a"
    Bar b:
      b

  + 2 1
  + "Hi" ", world!"
  + Foo Bar

